<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aveva.Pdms.Database.Xml</name>
    </assembly>
    <members>
        <member name="T:Aveva.Pdms.Database.Xml.Addin">
            <summary>
            Summary description for Addin.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Addin.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.DabaconIO">
            <summary>
            This class provides all the database IO methods needed for creating, deleting, renaming, etc., Elements.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.DabaconIO.DbModeExplicit">
            <summary>
            value of CLAIDB for explicit claim mode
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.DabaconIO.DbModeImplicit">
            <summary>
            Value of CLAIDB for implicit claim mode
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.CreateFirst(Aveva.Pdms.Database.DbElementType,Aveva.Pdms.Database.DbElement)">
            <summary>
            Creates an element as the first member of parent
            Error messages are logged as exceptions if null is returned.
            </summary>
            <param name="elementType">The type of element to create</param>
            <param name="parent">The parent to insert it into</param>
            <returns>The created element, or null </returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.CreateBefore(Aveva.Pdms.Database.DbElementType,Aveva.Pdms.Database.DbElement)">
            <summary>
            Creates an element before the given element as a sibling
            Error messages are logged as exceptions if null is returned.
            </summary>
            <param name="elementType">The type of element to create</param>
            <param name="sibling">The sibling to insert the element before</param>
            <returns>The created element, or null </returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.CreateAfter(Aveva.Pdms.Database.DbElementType,Aveva.Pdms.Database.DbElement)">
            <summary>
            Creates an element after the given element as a sibling
            Error messages are logged as exceptions if null is returned.
            </summary>
            <param name="elementType">The type of element to create</param>
            <param name="sibling">The sibling to insert the element after</param>
            <returns>The created element, or null </returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.CreateLast(Aveva.Pdms.Database.DbElementType,Aveva.Pdms.Database.DbElement)">
            <summary>
            Creates an element as the last member of parent
            Error messages are logged as exceptions if null is returned.
            </summary>
            <param name="elementType">The type of element to create</param>
            <param name="parent">The parent to append it to</param>
            <returns>The created element, or null </returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.CreateElement(Aveva.Pdms.Database.DbElementType,Aveva.Pdms.Database.DbElement)">
            <summary>
            Creates an element by appending it to the parent provided
            Error messages are logged as exceptions if null is returned.
            </summary>
            <param name="elementType">The type of element to create</param>
            <param name="parent">The parent to append it to</param>
            <returns>The created element, or null </returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.CreateElementAfter(Aveva.Pdms.Database.DbElementType,Aveva.Pdms.Database.DbElement,Aveva.Pdms.Database.DbElement)">
            <summary>
            Creates an element by inserting it into the parent provided
            Error messages are logged as exceptions if null is returned.
            </summary>
            <param name="previous">The element to insert the new element after</param>
            <param name="elementType">The type of element to create</param>
            <param name="parent">The parent to append it to</param>
            <returns>The created element, or null </returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.InsertElementAfter(Aveva.Pdms.Database.DbElement,Aveva.Pdms.Database.DbElement,Aveva.Pdms.Database.DbElement)">
            <summary>
            Moves an element to be after the given node in owner.
            </summary>
            <param name="element">the element to move</param>
            <param name="owner">the parent for element</param>
            <param name="previous">if this is null then the element is inserted as the first member</param>
            <returns>false if unsuccessful, otherwise true.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.UpdateAttribute(Aveva.Pdms.Database.DbElement,Aveva.Pdms.Database.DbAttribute,System.String)">
            <summary>
            Method to update an attribute using a string to represent the new value.
            Nb setting CE berfore calling this method may affect the setting of element references.
            </summary>
            <param name="element">The DbElement to update</param>
            <param name="attr">The attribute to update</param>
            <param name="newValue">The new value to set the attribute to</param>
            <returns>true if sucessful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.CopyAttribute(Aveva.Pdms.Database.DbElement,Aveva.Pdms.Database.DbElement,Aveva.Pdms.Database.DbAttribute)">
            <summary>
            Copies a specified attribute form a source dtaabase element to a destination element
            </summary>
            <param name="srcElement">The DbElement to copy from</param>
            <param name="destElement">The DbElement to set the attribute on</param>
            <param name="attr">The attribute to copy</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.UpdateElementAttribute(Aveva.Pdms.Database.DbElement,Aveva.Pdms.Database.DbAttribute,Aveva.Pdms.Database.DbElement)">
            <summary>
            Updates an Element Reference attribute on an element
            </summary>
            <param name="element">The element to update</param>
            <param name="att">The element reference attribute</param>
            <param name="elementValue">The element to set the attribute value to</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.UpdateElementArrayAttribute(Aveva.Pdms.Database.DbElement,Aveva.Pdms.Database.DbAttribute,Aveva.Pdms.Database.DbElement[])">
            <summary>
            Updates an element array attribtue value on a given element.
            </summary>
            <param name="element">The element to update</param>
            <param name="att">The attribute to update</param>
            <param name="elements">The array of element references to use as the attribute value.</param>
            <returns>true if successful, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.StripUnits(System.String,Aveva.Pdms.Database.DbAttributeUnit)">
            <summary>
            Strips the units of measure of a dimensioned type string
            </summary>
            <param name="valueStr">The value with units of measure</param>
            <param name="units">The dimension of the attribute</param>
            <returns>The real value parsed</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.GetDbForElement(Aveva.Pdms.Database.DbElement)">
            <summary>
            This implementation seems to be the only way to do this.
            Navigating to the parent world and matching to db.World doesn't work
            MDB.CurrentMDB.GetDB(element.DbNo) doesn't work
            Iterating the worlds and checking descendency doesn't work.
            </summary>
            <param name="element">The database element to get the db for</param>
            <returns>the database that contains element or null if the database can't be determined</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.GetWorldForElement(Aveva.Pdms.Database.DbElement)">
            <summary>
            Fix because MDB.CurrentMDB.GetDB(element.DbNo).World doesn't work
            </summary>
            <param name="element">The database elemnt to get the world element for</param>
            <returns>the world element that contains element or null if the world owner can't be found</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.GetDbElement(System.String)">
            <summary>
            Gets a DbElement given a string which is a name or dbreference.
            Nulref returns null.
            </summary>
            <param name="nameOrRef">the string name or dbreference</param>
            <returns>The element or an invalid element</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.GetDbElement(System.String,Aveva.Pdms.Database.DbType)">
            <summary>
            Since names are now permitted to clash this gets a named element for a given database type
            </summary>
            <param name="nameOrRef">the string name or dbreference</param>
            <param name="type">the database type of databases to look in</param>
            <returns>The element or an invalid element</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.GetDbElements(System.String)">
            <summary>
            Gets the valid DbElements given a string which is a name.
            Nulref or 'unset' returns null.
            </summary>
            <param name="nameOrRef">the string name or dbreference</param>
            <returns>The element or an invalid element</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.GetDbElements(System.String,Aveva.Pdms.Database.DbType[])">
            <summary>
            Gets DbElements, given a string which is a name, that clash if the element
            passed was given the same name.
            </summary>
            <param name="name">The name of the element to search for</param>
            <param name="dbtypes">The database types to search in</param>
            <returns>The element(s) or an empty array</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.GetDbTypesFromCurrentMDB">
            <summary>
            Gets all of the DbTypes for the current MDB
            </summary>
            <returns>An array of the DbTypes in the current MDB.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.IsDBREF(System.String)">
            <summary>
            checks to see if a given string is a dbref
            </summary>
            <param name="dbref">the string to check</param>
            <returns>true, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.DBREF(System.String)">
            <summary>
            Converts a string representation of a dbref into an integer array.
            </summary>
            <param name="dbref">The string representation of a DBREF</param>
            <returns>an int array for use with database methods</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.DBREF(System.Int32[])">
            <summary>
            Converts an int array into a string representation of a DBREF
            </summary>
            <param name="refno">The int array to convert</param>
            <returns>a string representation of the refno given</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.FindWriteableWorld(Aveva.Pdms.Database.DbType)">
            <summary>
            finds the first world in the current MDB that is writeable for the given dbtype.
            </summary>
            <param name="dbtype">A dbtype as returned by DbElementType.DbType</param>
            <returns>null or a World element</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.FindWriteableWorlds(Aveva.Pdms.Database.DbType)">
            <summary>
            Finds all the worlds in the current MDB that are writeable for the given dbtype
            </summary>
            <param name="dbtype">A dbtype as returned by DbElementType.DbType</param>
            <returns>null or a World element</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.GetDbAttribute(System.String)">
            <summary>
            A method to get an attribute instance or return a null if such an attribute doesn't exist
            This is useful for checking if a UDA exists.
            This can be combined with HasAttribute to check the attribute is valid for a DbElementType.
            </summary>
            <param name="name">The name of the DbAttribute instance to get</param>
            <returns>The DbAttribute instance or null</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.GetDbAttributes(Aveva.Pdms.Database.DbElementType)">
            <summary>
            Gets the attributes for an ElementType as a single array
            </summary>
            <param name="elementType">The elementType to get the attributes from</param>
            <returns>An array of attributes including system attributes and UDAs</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.GetVisibleDbAttributes(Aveva.Pdms.Database.DbElementType)">
            <summary>
            Gets the visible attributes for an ElementType as a single array
            </summary>
            <param name="elementType">The elementType to get the attributes from</param>
            <returns>An array of attributes including system attributes and UDAs</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.GetSettableDbAttributes(Aveva.Pdms.Database.DbElementType)">
            <summary>
            Gets the settable attributes for an element type, ignoring Pseudos
            Notes:
            - currently delcares all udas as settable since not sure how to distinguish pseudo udas that use background storage
            </summary>
            <param name="elementType">The element type to get the settable attributes for</param>
            <returns>a List of attributes</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.HasAttribute(Aveva.Pdms.Database.DbElement,Aveva.Pdms.Database.DbAttribute)">
            <summary>
            Provides a simple if not efficient way of checking whether an attribute is
            valid on an element.
            </summary>
            <param name="element">The element</param>
            <param name="att">The atrribute</param>
            <returns>True if the attribute is valid on the element</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.HasAttribute(Aveva.Pdms.Database.DbElementType,Aveva.Pdms.Database.DbAttribute)">
            <summary>
            Provides a simple if not efficient way of checking whether an attribute is
            valid on an element type.
            </summary>
            <param name="elementType">The element type</param>
            <param name="att">The atrribute</param>
            <returns>True if the attribute is valid on the element type</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.MoveElement(Aveva.Pdms.Database.DbElement,Aveva.Pdms.Database.DbElement)">
            <summary>
            Moves an element to the new parent provided by appending it to its members.
            This does not work if the element is in a separate db to the parent provided.
            </summary>
            <param name="element">The element to move</param>
            <param name="newParent">The new Owner for the element</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.DeleteElement(Aveva.Pdms.Database.DbElement)">
            <summary>
            Deletes a database element and logs an errors.
            </summary>
            <param name="element">the database element to delete</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.DeleteElementInTransaction(Aveva.Pdms.Database.DbElement)">
            <summary>
            Deletes a database element and logs an errors.
            </summary>
            <param name="element">the database element to delete</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.ChangeType(Aveva.Pdms.Database.DbElement,Aveva.Pdms.Database.DbElementType,System.Boolean)">
            <summary>
            Attempts to change the element type of the current element.
            If the new type isn't permitted as a member of element.Owner then a
            value of false is returned.
            </summary>
            <param name="element">The element to change type.</param>
            <param name="newType">The new type for the element</param>
            <param name="delete"> if true then the original element is deleted, if false then this is left upto the calling code.</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.CanSwapReferences(Aveva.Pdms.Database.DbElement)">
            <summary>
            Checks the current user can update the elements in SwapReferences
            </summary>
            <param name="element">the element that is being referenced</param>
            <returns>true if ok, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.SwapReferences(Aveva.Pdms.Database.DbElement,Aveva.Pdms.Database.DbElement)">
            <summary>
            Checks the CREF,CRFA and ECRFA attributes of element to find what references it and
            sets the HREFs and TREFs to reference newElement instead.
            </summary>
            <param name="element">The element currently referenced in the DB</param>
            <param name="newElement">The new element to reference instead</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.SwapHREFOrTREF(Aveva.Pdms.Database.DbElement,Aveva.Pdms.Database.DbElement,Aveva.Pdms.Database.DbElement)">
            <summary>
            For a given branch element this method identifies if the HREF or TREF is set
            to element and if so changes HREF or TREF to refer to newElement
            </summary>
            <param name="branch">The branch to change the HREF/TREF of</param>
            <param name="oldElement">The old element reference</param>
            <param name="newElement">The new element reference</param>
            <returns>true, if successful or not set to oldElement, false if errored</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.DatabaseMode(Aveva.Pdms.Database.Db)">
            <summary>
            Returns the database type for a given database. The type will be one of unset/explicit/implicit - in lower case.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.ElementHasBeenClaimed(Aveva.Pdms.Database.DbElement)">
            <summary>
            Returns TRUE if the given element has been claimed; else FALSE
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.ElementNotClaimedByCurrentUser(Aveva.Pdms.Database.DbElement)">
            <summary>
            Returns TRUE if the given element has been claimed by the current user; else FALSE
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.CanUpdate(Aveva.Pdms.Database.DbElement,System.Boolean)">
            <summary>
            Checks to see whether an element can be updated without error (subject to DACS)
            </summary>
            <param name="element">The element to check</param>
            <param name="logIfFalse">If true then the log will contain the reason for any false results</param>
            <returns>true if the item can be updated, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.DbElementTypes(Aveva.Pdms.Database.DbType)">
            <summary>
            Gets the DbElementType instances for a given database type
            </summary>
            <param name="dbtype">The database type to get the element types for</param>
            <returns>a collection of the names </returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.ElementTypeValidForDbType(Aveva.Pdms.Database.DbElementType,Aveva.Pdms.Database.DbType)">
            <summary>
            checks if a DbElementType is capable of being stored in a database of a given type
            </summary>
            <param name="etype">the DbElementType to check</param>
            <param name="dbtype">the database type that etype may be permitted in</param>
            <returns>true if etype is supported in dbtype otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.SecondaryMembers(Aveva.Pdms.Database.DbElement)">
            <summary>
            Provides an array of the secondary hierarchy members for a DbElement or returns an empty result
            </summary>
            <param name="element">The database element to access the secondary members from</param>
            <returns>an empty array if no secondary heirarchy or an array of child members</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.IsOrderedElement(Aveva.Pdms.Database.DbElement)">
            <summary>
            returns true if the order members of the given element is technically significant.
            e.g. SCSEGMENT members.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.DabaconIO.m_permittedTypeChanges">
            <summary>
            matrix of permitted type changes
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.initTypeChangesTable">
            <summary>
            initialises the type change matrix
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DabaconIO.IsTypeChangePermitted(Aveva.Pdms.Database.DbElementType,Aveva.Pdms.Database.DbElementType)">
            <summary>
            identifies whether a change of type from a given type to a destination type is permitted during an import.
            The current implementation is rudimentary, something more complex is likely to be required, i.e. plugin specific?
            </summary>
            <param name="etypeSrc">The type of the element as in the database</param>
            <param name="etypeDest">The type of element in the source file</param>
            <returns>true if the type of the database element is permitted to change to etypeDest during an import</returns>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.DbDataSet">
            <summary>
            Class to help with DataSet specific functionality
            A DataSet is structured the same as a DbDocument except that all child members are output as members of the rootNode instead of hierarchically
            The target namespace is the dataset namespace 'avds' 'http://www.aveva.com/xml/DbDataSet'
            The DataSet is output with a different root node to ensure that it can be identified for import
            The DbDocumentNavigator is used with an appropriate stylesheet to output the DataSet.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.DbDataSet.RootTagName">
            <summary>
            The Root Tag Name for a Dataset XML Document
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDataSet.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDataSet.GenerateSchemaSetForMdb(System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            This generates a schema set that includes all of the valid element types in the current MDB.
            </summary>
            <param name="requiredPseudos">A dictionary containing the required pseudo attributes for each element type, can be null</param>
            <returns>the created XmlSchemaSet Object</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDataSet.GenerateXsdForMdb(System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}},System.String)">
            <summary>
            This generates a schema file with the filename this.SchemaFilename in the output directory specified.
            The schema generated includes all of the valid element types in the current MDB.
            </summary>
            <param name="xsdFilename">The name of the schema file to create</param>
            <param name="requiredPseudos">A dictionary containing the required pseudo attributes for each element type, can be null</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDataSet.GenerateSchemaSetForDbTypes(System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbType},System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            This generates a schema set that includes all of the valid element types for the dbtypes provided.
            </summary>
            <param name="dbtypes">The database types to output element definitions for</param>
            <param name="requiredPseudos">A dictionary containing the required pseudo attributes for each element type, can be null</param>
            <returns>The created XmlSchemaSet</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDataSet.GenerateXsdForDbTypes(System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbType},System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}},System.String)">
            <summary>
            This generates a schema file with the given filename.
            The schema generated includes all of the valid element types for the dbtypes provided.
            </summary>
            <param name="dbtypes">The database types to output element definitions for</param>
            <param name="requiredPseudos">A dictionary containing the required pseudo attributes for each element type, can be null</param>
            <param name="xsdFilename">The full pathname of the schema file to write.</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDataSet.GenerateSchemaSetForElementTypes(System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbElementType},System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            This generates a schema set that includes the element types and their descendant types
            </summary>
            <param name="etypes">The element types to be supported in the schema</param>
            <param name="requiredPseudos">A dictionary containing the required pseudo attributes for each element type, can be null</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDataSet.GenerateXsdForElementTypes(System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbElementType},System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}},System.String)">
            <summary>
            This generates a schema file with the given filename that includes the element types and their descendant types
            Nb. this may throw io exceptions or schema related exceptions if the file cannot be created.
            </summary>
            <param name="etypes">The element types to be supported in the schema</param>
            <param name="requiredPseudos">A dictionary containing the required pseudo attributes for each element type, can be null</param>
            <param name="xsdFilename">The full pathname of the schema file to write.</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDataSet.GenerateSchemaDocumentsForElementTypes(System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbElementType},System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}},System.String,System.String,System.Xml.XmlDocument@,System.Xml.XmlDocument@,System.Xml.XmlDocument@)">
            <summary>
            This generates a set of schema files as XmlDocument instances.
            Nb. this may throw io exceptions or schema related exceptions.
            </summary>
            <param name="etypes">The element types to be supported in the schema</param>
            <param name="requiredPseudos">A dictionary containing the required pseudo attributes for each element type, can be null</param>
            <param name="udasSchemaFname"></param>
            <param name="udetsSchemaFname"></param>
            <param name="udasSchema"></param>
            <param name="udetsSchema"></param>
            <param name="typesSchema"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDataSet.CreateUDAsSchema(System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbElementType})">
            <summary>
            Create an outline schema as an XmlDocument to contain the UDA definitions
            </summary>
            <returns>The created schema as an XmlDocument</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDataSet.CreateSchemaAttributeEntry(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Creates an XmlNode that represents an xs:attribute entry
            Notes :
            this doesn't yet support all of the xs:attribute attributes
            </summary>
            <param name="doc">The schema the XmlNode is for</param>
            <param name="name">The name of the XML attribute to define</param>
            <param name="type">The type of the XML attribute </param>
            <returns>The XmlNode for the xs:attribute entry</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDataSet.CreateSchemaUDAAttributeRef(System.Xml.XmlDocument,System.String)">
            <summary>
            Creates an XmlNode that represents an xs:attribute entry
            Notes :
            this doesn't yet support all of the xs:attribute attributes
            </summary>
            <param name="doc">The schema the XmlNode is for</param>
            <param name="name">The name of the XML attribute to define</param>
            <returns>The XmlNode for the xs:attribute entry</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDataSet.CreateUDETsSchema(System.String,System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbElementType},System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            Create an outline schema as an XmlDocument to contain the UDET definitions
            </summary>
            <param name="udaXsdFilename">The filename of the UDA schema</param>
            <param name="etypes">The element types list being processed</param>
            <param name="requiredPseudos">A dictionary containing the required pseudo attributes for each element type, can be null</param>
            <returns>The created schema as an XmlDocument</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDataSet.CreateTypesSchema(System.String,System.String,System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbElementType},System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            Create an outline schema as an DbDataSet to contain the database element types
            </summary>
            <param name="udaXsdFilename">The name of the UDA definition schema to import</param>
            <param name="udetXsdFilename">The name of the UDET definition schema to import</param>
            <param name="etypes">The element types list being processed</param>
            <param name="requiredPseudos">A dictionary containing the required pseudo attributes for each element type, can be null</param>
            <returns>The created schema as an XmlDocument</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDataSet.CreateSchemaElementEntry(System.Xml.XmlDocument,Aveva.Pdms.Database.DbElementType,System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            This method creates an XmlNode representing the schema definition for a DbElementType and adds it to the required schema
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.DbDocument">
            <summary>
            Wrapper class to enable transformation of database elements using XSLT
            Nb schemas cannot be generated currently for files containing pseudo attributes.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.DbDocument.RootTagName">
            <summary>
            The tag name of the root node
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.DbDocument.DeleteTagName">
            <summary>
            the name of the delete element tag used for deletions instead of updates
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.DbDocument.ProjectTagName">
            <summary>
            The name of the project element tag used for project metadata
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.DbDocument.VersionAttributeName">
            <summary>
            The name of the attribute carrying the installation version
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.DbDocument.CreationTimeAttributeName">
            <summary>
            The name of the attribute carrying the CreationTime of the DbDocument
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.#ctor">
            <summary>
            Creates a document representing the current MDB
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a document representing the current MDB
            </summary>
            <param name="showPseudoAttributes">If true then pseudo attributes are available in the document</param>
            <param name="expandSecondaryHierarchy">If true then secondary hierarchies are expanded one level when navigating</param>
            <param name="referencesAsNames">If true then reference attributes are output using NAME values</param>
            <param name="resolvableNames">If true then references to unnamed items are output as refs even when referencesAsNames is true</param>
            <param name="showDisplayAttributes">If true then only the pdms display attributes are navigated, Nb displayAttributes and showPseudottributes are mutually exclusive</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.#ctor(System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a document representing the current MDB
            </summary>
            <param name="pseudoAttributes">the pseudo attributes to show for each element type in the database</param>
            <param name="expandSecondaryHierarchy">If true then secondary hierarchies are expanded one level when navigating</param>
            <param name="referencesAsNames">If true then reference attributes are output using NAME values</param>
            <param name="resolvableNames">If true then references to unnamed items are output as refs even when referencesAsNames is true</param>
            <param name="showDisplayAttributes">If true then only the pdms display attributes are navigated, Nb displayAttributes and showPseudottributes are mutually exclusive</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.#ctor(Aveva.Pdms.Database.DbElement)">
            <summary>
            Creates a document representing a database element and sub-hierarchy
            </summary>
            <param name="element">The element hierarchy to include in the Database document</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.#ctor(Aveva.Pdms.Database.DbElement,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a document representing a database element and sub-hierarchy
            </summary>
            <param name="element">The element hierarchy to include in the Database document</param>
            <param name="showPseudoAttributes">If true then pseudo attributes are available in the document</param>
            <param name="expandSecondaryHierarchy">If true then secondary hierarchies are expanded one level when navigating</param>
            <param name="referencesAsNames">If true then reference attributes are output using NAME values</param>
            <param name="resolvableNames">If true then references to unnamed items are output as refs even when referencesAsNames is true</param>
            <param name="showDisplayAttributes">If true then only the pdms display attributes are navigated, Nb displayAttributes and showPseudottributes are mutually exclusive</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.#ctor(Aveva.Pdms.Database.DbElement,System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a document representing the current MDB
            </summary>
            <param name="element">The element hierarchy to include in the Database document</param>
            <param name="pseudoAttributes">the pseudo attributes to show for each element type in the database</param>
            <param name="expandSecondaryHierarchy">If true then secondary hierarchies are expanded one level when navigating</param>
            <param name="referencesAsNames">If true then reference attributes are output using NAME values</param>
            <param name="resolvableNames">If true then references to unnamed items are output as refs even when referencesAsNames is true</param>
            <param name="showDisplayAttributes">If true then only the pdms display attributes are navigated, Nb displayAttributes and showPseudottributes are mutually exclusive</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.#ctor(Aveva.Pdms.Database.DbElement[])">
            <summary>
            Creates a document representing a set of database elements and their sub-hierarchy
            </summary>
            <param name="elements">The elements to include in the Database document</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.#ctor(Aveva.Pdms.Database.DbElement[],System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a document representing a set of database elements and their sub-hierarchy
            </summary>
            <param name="elements">The elements to include in the Database document</param>
            <param name="showPseudoAttributes">If true then pseudo attributes are available in the document</param>
            <param name="expandSecondaryHierarchy">If true then secondary hierarchies are expanded one level when navigating</param>
            <param name="referencesAsNames">If true then reference attributes are output using NAME values</param>
            <param name="resolvableNames">If true then references to unnamed items are output as refs even when referencesAsNames is true</param>
            <param name="showDisplayAttributes">If true then only the pdms display attributes are navigated, Nb displayAttributes and showPseudottributes are mutually exclusive</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.#ctor(Aveva.Pdms.Database.DbElement[],System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a document representing the current MDB
            </summary>
            <param name="elements">The elements to include in the Database document</param>
            <param name="pseudoAttributes">the pseudo attributes to show for each element type in the database</param>
            <param name="expandSecondaryHierarchy">If true then secondary hierarchies are expanded one level when navigating</param>
            <param name="referencesAsNames">If true then reference attributes are output using NAME values</param>
            <param name="resolvableNames">If true then references to unnamed items are output as refs even when referencesAsNames is true</param>
            <param name="showDisplayAttributes">If true then only the pdms display attributes are navigated, Nb displayAttributes and showPseudottributes are mutually exclusive</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.#ctor(Aveva.Pdms.Database.DbType)">
            <summary>
            Creates a document representing the databases that have the specified database type
            </summary>
            <param name="type">The database type of the databases to include in the database document</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.#ctor(Aveva.Pdms.Database.DbType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a document representing the databases that have the specified database type
            </summary>
            <param name="type">The database type of the databases to include in the database document</param>
            <param name="showPseudoAttributes">If true then pseudo attributes are available in the document</param>
            <param name="expandSecondaryHierarchy">If true then secondary hierarchies are expanded one level when navigating</param>
            <param name="referencesAsNames">If true then reference attributes are output using NAME values</param>
            <param name="resolvableNames">If true then references to unnamed items are output as refs even when referencesAsNames is true</param>
            <param name="showDisplayAttributes">If true then only the pdms display attributes are navigated, Nb displayAttributes and showPseudottributes are mutually exclusive</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.#ctor(Aveva.Pdms.Database.DbType,System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a document representing the current MDB
            </summary>
            <param name="type">The database type of the databases to include in the database document</param>
            <param name="pseudoAttributes">the pseudo attributes to show for each element type in the database</param>
            <param name="expandSecondaryHierarchy">If true then secondary hierarchies are expanded one level when navigating</param>
            <param name="referencesAsNames">If true then reference attributes are output using NAME values</param>
            <param name="resolvableNames">If true then references to unnamed items are output as refs even when referencesAsNames is true</param>
            <param name="showDisplayAttributes">If true then only the pdms display attributes are navigated, Nb displayAttributes and showPseudottributes are mutually exclusive</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.#ctor(Aveva.Pdms.Database.DbType[])">
            <summary>
            Creates a document representing the databases that have the specified database types
            </summary>
            <param name="types">The database types of the databases to include in the database document</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.#ctor(Aveva.Pdms.Database.DbType[],System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a document representing the databases that have the specified database types
            </summary>
            <param name="types">The database types of the databases to include in the database document</param>
            <param name="showPseudoAttributes">If true then pseudo attributes are available in the document</param>
            <param name="expandSecondaryHierarchy">If true then secondary hierarchies are expanded one level when navigating</param>
            <param name="referencesAsNames">If true then reference attributes are output using NAME values</param>
            <param name="resolvableNames">If true then references to unnamed items are output as refs even when referencesAsNames is true</param>
            <param name="showDisplayAttributes">If true then only the pdms display attributes are navigated, Nb displayAttributes and showPseudottributes are mutually exclusive</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.#ctor(Aveva.Pdms.Database.DbType[],System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a document representing the current MDB
            </summary>
            <param name="types">The database types of the databases to include in the database document</param>
            <param name="pseudoAttributes">the pseudo attributes to show for each element type in the database</param>
            <param name="expandSecondaryHierarchy">If true then secondary hierarchies are expanded one level when navigating</param>
            <param name="referencesAsNames">If true then reference attributes are output using NAME values</param>
            <param name="resolvableNames">If true then references to unnamed items are output as refs even when referencesAsNames is true</param>
            <param name="showDisplayAttributes">If true then only the pdms display attributes are navigated, Nb displayAttributes and showPseudottributes are mutually exclusive</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.#ctor(System.IO.Stream)">
            <summary>
            Constructs a document based DbDocument from a stream
            </summary>
            <param name="stream">The stream containing the Xml source content for this document</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructs a document based DbDocument from an XML Document
            </summary>
            <param name="doc">The Xml Document to create a DbDocument from</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.AddImportPlugin(Aveva.Pdms.Database.Xml.IImportPlugin)">
            <summary>
            Adds an application specific plugin to the XMLDabacon class to be used during imports.
            </summary>
            <param name="plugin"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.GetPlugin(System.String)">
            <summary>
            Provides access to named import plugin instances.
            </summary>
            <param name="name">The name of the plugin to retrieve</param>
            <returns>null or the named plugin</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.AddDeleteElementToDocument(System.Xml.XmlNode,Aveva.Pdms.Database.DbElement)">
            <summary>
            creates a DeleteElement instruction in the document of the XmlNode given
            </summary>
            <param name="context">The XmlNode that is part of an XMLDabacon structure</param>
            <param name="element">the Database element to create a delete instruction for</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.Resolve(System.String)">
            <summary>
            uses the initial element references and names to resolve a given reference value
            or array of references
            </summary>
            <param name="refOrNameAtt">The reference attribute to resolve</param>
            <returns>the resolved reference attribute</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.ResolveNode(System.String)">
            <summary>
            uses the initial element references and names to resolve a given reference value to an XmlNode
            </summary>
            <param name="refOrNameAtt">The single reference to resolve</param>
            <returns>the resolved reference</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.MatchToDbs(Aveva.Pdms.Database.Xml.SrcFile,Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            Matches this DbDocument to the database contents.
            </summary>
            <param name="srcfile">The SrcFile object associated with the DbDocument</param>
            <param name="result">The match status result</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.ImportToDbs(Aveva.Pdms.Database.Xml.SrcFile,Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            Imports a SrcFile into the databases.
            Ideally all imports are managed through the use of SrcFileCollection.ImportToDbs()
            </summary>
            <param name="srcfile">The SrcFile object to import</param>
            <param name="result">This is passed in so that imports can be chained together.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.ClearContents">
            <summary>
            Clears the element and metadata on a DbDocument instance.
            Nb this retains the attribute metadata on the DbDocument element itself.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.RaiseMatchEventToPlugin(Aveva.Pdms.Database.Xml.ISrcFile,System.Xml.XmlNode,Aveva.Pdms.Database.Xml.ImportStatus)">
            <summary>
            for each of the plugins calls the post match event
            </summary>
            <param name="srcfile">The ISrcFile being processed</param>
            <param name="node">The XML Node tht has been through the matching process</param>
            <param name="result">The current import status</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.PopulateRefToXmlElement(Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            Populates the reference look up so that cross references can be resolved.
            The reference lookup is used to resolve references before the database is checked, this allows elements to be migrated from one database to another without loosing their referential integrity
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.PopulateRefToXmlElement(System.Xml.XmlElement,Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            populates the reference look up so that cross references can be resolved.
            </summary>		
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.Replace_Ref_Name_Lookup(System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            An lookup of REF/NAME original values to XmlNode is kept from the start of the import.
            If a plugin removes an XmlNode for the import and replaces it with a new one then to maintain the lookups this
            method should be called.
            Note : there is no point calling this method post match with refvalue since the refs wil lhave been updated to reflect the db state.
            </summary>
            <param name="origNode">The node that has been replaced in the Xml document</param>
            <param name="newNode">The XmlNode which has replaced the original XmlNode</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.MatchElementsToDbs(Aveva.Pdms.Database.Xml.ISrcFile,Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            This method iterates over the XMLDabaconDocument XML and validates it for import
            by matching it to the database contents and database type definitions.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.DoDbDeletes(Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            Iterates over the DeleteElement elements and deletes them
            </summary>
            <returns>true if successful, false if errors were returned.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.DoDbUpdates(System.Boolean,Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            Update the database contents using the document in this instance.
            This doesn't do deletes.
            </summary>
            <returns>true if no errors, false if errors were encountered.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.CreateNavigator">
            <summary>
            Creates an XPathNavigator object for this document
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.GenerateSchemaSetForInstallation(System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            Generates the schemas for the current install and returns them as a single set object
            </summary>
            <param name="requiredPseudos">any additional attributes to add to the schema</param>
            <returns>The generated schema set object</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.GenerateXsdForInstallation(System.String,System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            This generates a schema file with the filename given that includes all of the valid
            element definitions for the PDMS installation.
            </summary>
            <param name="xsdFilename">The name of the schema file to create</param>
            <param name="requiredPseudos">Any additional pseudo attributes to add to the schema</param>
            <returns>true if successful, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.GenerateSchemaSetForMdb(System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            This generates a schema set that includes all of the valid element types in the current MDB.
            </summary>
            <param name="requiredPseudos">Any additional pseudo attributes to permit in the schema</param>
            <returns>the created XmlSchemaSet Object</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.GenerateXsdForMdb(System.String,System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            This generates a schema file with the filename this.SchemaFilename in the output directory specified.
            The schema generated includes all of the valid element types in the current MDB.
            </summary>
            <param name="xsdFilename">The name of the schema file to create</param>
            <param name="requiredPseudos">Any additional pseudo attributes to permit for each element type</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.GenerateSchemaSetForDbType(Aveva.Pdms.Database.DbType,System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            This generates a schema set that includes all of the
            valid element types for the dbtype provided.
            </summary>
            <param name="dbtype">The database type to output element definitions for</param>
            <param name="requiredPseudos">Any additional pseudo attributes to permit in the schema</param>
            <returns>The created schema set</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.GenerateXsdForDbType(Aveva.Pdms.Database.DbType,System.String,System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            This generates a schema file with the given filename that includes all of the
            valid element types for the dbtype provided.
            </summary>
            <param name="dbtype">The database type to output element definitions for</param>
            <param name="xsdFilename">The full pathname of the schema file to write.</param>
            <param name="requiredPseudos">Any additional pseudo attributes to permit in the schema</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.GenerateSchemaSetForDbTypes(System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbType},System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            This generates a schema set that includes all of the valid element types for the dbtypes provided.
            </summary>
            <param name="dbtypes">The database types to output element definitions for</param>
            <param name="requiredPseudos">Any additional pseudo attributes to be included in the schema</param>
            <returns>The created XmlSchemaSet</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.GenerateXsdForDbTypes(System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbType},System.String,System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            This generates a schema file with the given filename.
            The schema generated includes all of the valid element types for the dbtypes provided.
            </summary>
            <param name="dbtypes">The database types to output element definitions for</param>
            <param name="xsdFilename">The full pathname of the schema file to write.</param>
            <param name="requiredPseudos">Any additional pseudo attributes to permit in the schema</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.GenerateSchemaSetForElementType(Aveva.Pdms.Database.DbElementType,System.Boolean,System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            This generates a schema set that includes the given element type and descendant types.
            </summary>
            <param name="etype">The element type to output element definitions for</param>
            <param name="withHierarchy">If true all element definitions for memberTypes are output.</param>
            <param name="requiredPseudos">Any additional pseudo attributes to permit in the schema</param>
            <returns>The created XmlSchemaSet</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.GenerateXsdForElementType(Aveva.Pdms.Database.DbElementType,System.String,System.Boolean,System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            This generates a schema file with the given filename that includes the element type and descendant types.
            </summary>
            <param name="etype">The element type to output element definitions for</param>
            <param name="xsdFilename">The full pathname of the schema file to write.</param>
            <param name="withHierarchy">If true all element definitions for memberTypes are output.</param>
            <param name="requiredPseudos">Any additional pseudo attributes required in the schema</param>
            <returns>true if successful, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.GenerateSchemaSetForElementTypes(System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbElementType},System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbType},System.Boolean,System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            This generates a schema set that includes the element types and their descendant types
            </summary>
            <param name="etypes">The element types to be supported in the schema</param>
            <param name="dbtypes">The database types to output element definitions for, if null all types are output</param>
            <param name="withHierarchy">if true all member type definitions are also output</param>
            <param name="requiredPseudos">Any additional pseudo attributes required in the schema</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.GenerateXsdForElementTypes(System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbElementType},System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbType},System.String,System.Boolean,System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            This generates a schema file with the given filename that includes the element types and their descendant types
            Nb. this may throw io exceptions or schema related exceptions if the file cannot be created.
            </summary>
            <param name="etypes">The element types to be supported in the schema</param>
            <param name="dbtypes">The database types to output element definitions for, if null all types are output</param>
            <param name="xsdFilename">The full pathname of the schema file to write.</param>
            <param name="withHierarchy">if true all member type definitions are also output</param>
            <param name="requiredPseudos">Any additional pseudo attributes to add to the schemas</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.GenerateSchemaDocumentsForElementTypes(System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbElementType},System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbType},System.String,System.String,System.String,System.Boolean,System.Xml.XmlDocument@,System.Xml.XmlDocument@,System.Xml.XmlDocument@,System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            This generates a set of schema files as XmlDocument instances.
            Nb. this may throw io exceptions or schema related exceptions.
            </summary>
            <param name="etypes">The element types to be supported in the schema</param>
            <param name="dbtypes">The database types to output element definitions for, if null all types are output</param>
            <param name="baseSchemaFname"></param>
            <param name="typesSchemaFname"></param>
            <param name="udasSchemaFname"></param>
            <param name="typesSchema"></param>
            <param name="udasSchema"></param>
            <param name="udetsSchema"></param>
            <param name="withHierarchy">if true all member type definitions are also output</param>
            <param name="requiredPseudos">Any additional pseudo attributes to add to the element types</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.CreateTypesSchema(System.String)">
            <summary>
            Create an outline schema as an XmlDocument to contain the database element types
            </summary>
            <param name="udaXsdFilename">The name of the UDA definition schema to import.</param>
            <returns>The created schema as an XmlDocument</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.CreateUDAsSchema(System.String)">
            <summary>
            Create an outline schema as an XmlDocument to contain the UDA definitions
            </summary>
            <returns>The created schema as an XmlDocument</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.CreateUDETsSchema(System.String)">
            <summary>
            Create an outline schema as an XmlDocument to contain the UDET definitions
            </summary>
            <param name="xsdFilename">The filename of the element type schema as requested by the user</param>
            <returns>The created schema as an XmlDocument</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.AddDBElementDefinitions(System.Xml.XmlDocument,System.Xml.XmlDocument,System.Xml.XmlDocument,System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbElementType},System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbType},System.Boolean,System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            see XMLDabacon.cs for details
            This method is to add the Element definitions to the schema template provided for the DbElementTypes provided
            </summary>
            <param name="typesSchema">The target XML schema document</param>
            <param name="udetsSchema">The target UDET Schema document</param>
            <param name="udasSchema">The target UDAs schema document</param>
            <param name="etypes">The element types to add to the schema</param>
            <param name="dbtypes">A constraint based on dbtype.  If null all provided element types are output</param>
            <param name="withHierarchy">true if member types should also be output</param>
            <param name="requiredPseudos">Any additional pseudo attributes to add to the element type definitions</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.NavigateTypeHierarchy(System.Xml.XmlDocument,System.Xml.XmlDocument,System.Xml.XmlDocument,Aveva.Pdms.Database.DbElementType,System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbType},System.Collections.Hashtable,System.Collections.Hashtable,System.Collections.Hashtable,System.Boolean,System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            This method adds schema definitions for the element type provided to a hashtable
            </summary>
            <param name="typesSchema">The schema that is to own the definitions</param>
            <param name="udasSchema">The associated UDAs schema file</param>
            <param name="udetsSchema">The associated UDET schema file</param>
            <param name="type">The DbElement type to create schema definitions for</param>
            <param name="dbtypes">The database types to constrain the output</param>
            <param name="udetsDone">The UDETs already defined</param>
            <param name="etypesDone">The element types already defined</param>
            <param name="udasDone">The UDAs already defined</param>
            <param name="withHierarchy">Set to true if the memberTypes for the element type provided are also to be added to xmlnodes</param>
            <param name="requiredPseudos">Any additional pseudo attributes to add to the element types</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.CreateDbElementTypeDefinition(System.Xml.XmlDocument,System.Xml.XmlDocument,System.Xml.XmlDocument,Aveva.Pdms.Database.DbElementType,System.Boolean,System.Collections.Hashtable,System.Collections.Hashtable,System.Collections.Hashtable,System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            This method creates an XmlNode representing the schema definition for a DbElementType and adds it to the required schema
            </summary>
            <param name="typesSchema">The schema document the node is to be added to.</param>
            <param name="udetsSchema">the associated UDETs schema being created</param>
            <param name="udasSchema">The associated UDAs schema being created</param>
            <param name="type">The DbElementType to create a schema definition for</param>
            <param name="withHierarchy">true if references to memberTypes are required</param>
            <param name="udetsDone">The UDETS already written out</param>
            <param name="etypesDone">The DbElementTypes already written out</param>
            <param name="udasDone">The UDA definitions completed</param>
            <param name="requiredPseudos">Any additional Pseudo attributesto add to the element type definitions</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.CreateComplexType(System.Xml.XmlDocument,System.Xml.XmlDocument,Aveva.Pdms.Database.DbElementType,System.Boolean,System.Boolean,System.Collections.Hashtable,System.Collections.Hashtable,System.Collections.Hashtable,System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            creates a complex type definition for an element type.
            If the element type is a udet then it assumes it extends type.BaseType.Name + "_ELEMENTTYPE" and defines the UDAs
            If the element type isn't a UDET then set base type to true if ctreating the base type definition or false if creating the UDA extensions
            </summary>
            <param name="schema">The schema used to create th XmlNode</param>
            <param name="udasSchema">The schema for uda definitions</param>
            <param name="etype">The element type to represent</param>
            <param name="baseType">set to true if creating the system definition or false for UDA definitions </param>
            <param name="withHierarchy">set to true if child members are being nested</param>
            <param name="etypesDone">the element types already defined</param>
            <param name="udetsDone">The udets already defined</param>
            <param name="udasDone">the udas already defined</param>
            <param name="requiredPseudos">Any additional pseudo attributes to add to the element types</param>
            <returns>The complex type node created, Nb this isn't added to the schema.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.SchemaType(Aveva.Pdms.Database.DbAttribute)">
            <summary>
            This maps an attribute type to a type in the schema template.
            This method assumes the schema template already contains the type definitions.
            These must have the name [ARRAY_][TYPE]_TYPE
            </summary>
            <param name="att">The DbAttribute to map to a schema type.</param>
            <returns>The schema type name for the attribute provided</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.CreateSchemaAttributeEntry(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Creates an XmlNode that represents an xs:attribute entry
            Notes :
            this doesn't yet support all of the xs:attribute attributes
            </summary>
            <param name="doc">The schema the XmlNode is for</param>
            <param name="name">The name of the XML attribute to define</param>
            <param name="type">The type of the XML attribute </param>
            <returns>The XmlNode for the xs:attribute entry</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.CreateSchemaAttributeReference(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Creates an XmlNode that represents an xs:attribute reference for an attribute declared elsewhere
            Notes :
            this doesn't yet support all of the xs:attribute attributes
            </summary>
            <param name="doc">The schema the XmlNode is for</param>
            <param name="name">The name of the XML attribute to define</param>
            <param name="type">The type of the XML attribute </param>
            <returns>The XmlNode for the xs:attribute entry</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocument.IsPermittedInDbs(Aveva.Pdms.Database.DbElementType,System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbType})">
            <summary>
            Method to determine is a given DbElemementType is permitted within any of the given DbTypes
            </summary>
            <param name="type">The Element type to check</param>
            <param name="dbtypes">a colleciton of database types to check</param>
            <returns>true if the element is permitted within any of the database types in the given collection</returns>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocument.Plugins">
            <summary>
            The plugins cuurently registered with the XML loader
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocument.Document">
            <summary>
            The XML document wrapped by this DbDocument instance
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocument.NamespaceManager">
            <summary>
            The Namespace Manager for the current XmlDocument
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.DbDocumentNavigator">
             <summary>
             Notes :
            	- the Select and Evaluate functions return standard XPathNavigator exceptions that must be checked for.
            
             - This navigator may operate in the following modes :
             	1. no namespace mode : all elements are not namespace qualified but udas remain namespace qualified
             	2. namespace mode : all elements and attributes are namespace qualified
             	
             - Extension functions
                 1. NamespaceManager() - provides access to a static manager for used as expression context.
                 2. MoveTo - function to navigate efficiently to a given name or dbref.
                 3. DbElement - returns the DbElement the navigator is currently at.
            
             - Nb deleteElement elements are not supported since navigating current database contents.
            
             TODO : (not release 1)
             - InScope doesn't support moving to secondary hierarchy members
             </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.#ctor(Aveva.Pdms.Database.DbElement,System.String)">
            <summary>
            This creates a navigator whoose database hierarchy has at its
            head the given database element.  This hierarchy is wrapped in a
            DbDocument element (see XMLDabacon specification).
            </summary>
            <param name="element">The database element being navigated.</param>
            <param name="schemaLocation">The full pathname of the associated schema file or String.Empty.
            Nb the document namespace is added to the pathname given by this constructor.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.#ctor(Aveva.Pdms.Database.DbElement[],System.String)">
            <summary>
            This creates a navigator for an XMLDabacon document that contains several
            database heirarchies.  These hierarchies are wrapped in a
            DbDocument element (see XMLDabacon specification).
            </summary>
            <param name="elements">An array of elements the navigator is to contain.
             Each element must not be in the hierarchy of any other given element.</param>
             <param name="schemaLocation">The full pathname of the associated schema file or String.Empty.
            Nb the document namespace is added to the pathname given by this constructor.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.#ctor(Aveva.Pdms.Database.DbType,System.String)">
            <summary>
            This creates a navigator for an XMLDabacon document that contains a
            database hierarchy for each database in the current MDB for a specified
            database type.  These hierarchies are wrapped in a DbDocument element
            (see XMLDabacon specification).
            </summary>
            <param name="type">The database type for which WORLD elements are to be added as hierarchy nodes to this navigator.</param>
            <param name="schemaLocation">The full pathname of the associated schema file or String.Empty.
            Nb the document namespace is added to the pathname given by this constructor.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.#ctor(Aveva.Pdms.Database.DbType[],System.String)">
            <summary>
            This creates a navigator for an XMLDabacon document that contains a
            database hierarchy for each database in the current MDB for the specified
            database types.  These hierarchies are wrapped in a DbDocument element
            (see XMLDabacon specification).
            </summary>
            <param name="types">The database types for which WORLD elements are to be added as hierarchy nodes to this navigator.</param>
            <param name="schemaLocation">The full pathname of the associated schema file or String.Empty.
            Nb the document namespace is added to the pathname given by this constructor.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.#ctor(System.String)">
            <summary>
            This creates a navigator for an XMLDabacon document that contains a
            database hierarchy for each database in the current MDB.
            These hierarchies are wrapped in a DbDocument element
            (see XMLDabacon specification).
            </summary>
            <param name="schemaLocation">The full pathname of the associated schema file or String.Empty.
            Nb the document namespace is added to the pathname given by this constructor.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.#ctor(Aveva.Pdms.Database.Xml.DbDocumentNavigator)">
            <summary>
            Constructs a navigator from a given navigator.
            </summary>
            <param name="navigator">The navigator to use to construct a new one</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.Clone">
            <summary>
            Creates a shallow copy of this navigator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.GetAttribute(System.String,System.String)">
            <summary>
            Gets the string value of the specified
            </summary>
            <param name="localName">The local name of the attribute to retrieve the value for</param>
            <param name="namespaceURI">The namespace of the attribute to retrieve the value for</param>
            <returns>The string value of the specified attribute</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves to the named attribute
            </summary>
            <param name="localName">The unqualified name of the attribute</param>
            <param name="namespaceURI">The Namespace</param>
            <returns>true if the navigator moved to the named attribute, false if not.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveToFirstAttribute">
            <summary>
            Moves to the first attribute node of the current node
            </summary>
            <returns>true if the navigator moved, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveToNextAttribute">
            <summary>
            Moves to the next attribute node of the current parent
            </summary>
            <returns>true if the navigator moved, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.GetNamespace(System.String)">
            <summary>
            Gets the namespace for the first named descendant element
            </summary>
            <param name="localname">the name of the descendant element to find</param>
            <returns>string.Empty or the namespace of the named element</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveToNamespace(System.String)">
            <summary>
            Moves the navigator to the first node with the named namespace.
            </summary>
            <param name="prefix">The prefix of the namespace to move to</param>
            <returns>true if the navigator moved, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the navigator to the first namespace with the given scope
            </summary>
            <param name="namespaceScope">The scope of the namespaces to consider</param>
            <returns>true if the navigator moved, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the navigator to the next node with the given scope
            </summary>
            <param name="namespaceScope">The namespace scope to consider</param>
            <returns>true if the navigator moved, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveToNext">
            <summary>
            Moves the navigator onto the next element
            </summary>
            <returns>true if the navigator moved, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveToPrevious">
            <summary>
            Moves the navigator to the previous element
            </summary>
            <returns>true if the navigator moved, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveToFirst">
            <summary>
            Moves to the first element in the current node context
            </summary>
            <returns>true if the navigator moved, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveToFirstChild">
            <summary>
            Moves the navigator to the first child element.
            </summary>
            <returns>true if the navigator moved, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveToParent">
            <summary>
            Moves to the parent node of the current navigator node
            </summary>
            <returns>true if the navigator moved, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveToRoot">
            <summary>
            Moves the navigator to the root node of the document.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
            <summary>
            Moves the navigator to a position indicated by a given navigator
            </summary>
            <param name="other">The navigator that indicates another position</param>
            <returns>true if successful, false if the given navigator doesn't have the same document heritage</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveToId(System.String)">
            <summary>
            Moves the navigator to an item based on its identity
            Nb even though dbrefs are not valid ids and aren't declared as id types this fix works
            since the processor passes the ids through unchecked.
            </summary>
            <param name="id">The ID attribute of the item to move to.</param>
            <returns>true if the navigator moved, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
            <summary>
            checks if this navigator is at the same position as a given navigator
            </summary>
            <param name="other">the navigator to check against</param>
            <returns>true if tthey both point at the same position, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.AppendChildElement(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a member inside a DbElement as the last member
            </summary>
            <param name="prefix">avdc or udet from XmlNamespaces</param>
            <param name="localName">The DbElementType</param>
            <param name="namespaceURI">avdc or udet namespace from XmlNamespaces</param>
            <param name="value">string.Empty or null (element values not supported in schema)</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.CreateAttribute(System.String,System.String,System.String,System.String)">
            <summary>
            Method Not Supported, NotSupportedException thrown
            </summary>
            <param name="prefix"></param>
            <param name="localName"></param>
            <param name="namespaceURI"></param>
            <param name="value"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.CreateAttributes">
            <summary>
            Method Not Supported, NotSupportedException thrown
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.InsertElementAfter(System.String,System.String,System.String,System.String)">
            <summary>
            Inserts an element after the element the current navigator points to
            </summary>
            <param name="prefix">avdc or udet from XmlNamespaces</param>
            <param name="localName">The DbElementType</param>
            <param name="namespaceURI">avdc or udet namespace from XmlNamespaces</param>
            <param name="value">string.Empty or null (element values not supported in schema)</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.InsertElementBefore(System.String,System.String,System.String,System.String)">
            <summary>
            Inserts an element before the element the current navigator points to
            </summary>
            <param name="prefix">avdc or udet from XmlNamespaces</param>
            <param name="localName">The DbElementType</param>
            <param name="namespaceURI">avdc or udet namespace from XmlNamespaces</param>
            <param name="value">string.Empty or null (element values not supported in schema)</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.PrependChildElement(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a member inside a DbElement as the first member
            </summary>
            <param name="prefix">avdc or udet from XmlNamespaces</param>
            <param name="localName">The DbElementType</param>
            <param name="namespaceURI">avdc or udet namespace from XmlNamespaces</param>
            <param name="value">string.Empty or null (element values not supported in schema)</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.DeleteSelf">
            <summary>
            Deletes the element at the current position.
            If not positioned on a dbelement then an InvalidOperationException is thrown.
            If the database element can't be deleted then a PDMSException is thrown.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.SetValue(System.String)">
            <summary>
            Sets the value of the current navigator location
            This navigator only supports setting attribute values
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.AppendChild">
            <summary>
            Appends the elements written to an XmlWriter to the current navigator
            Nb. Database not updated until the writer is closed
            </summary>
            <returns>The writer to write to</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.PrependChild">
            <summary>
            Prepends the elements written to an XmlWriter to the current navigator
            Nb. Database not updated until the writer is closed
            </summary>
            <returns>The writer to write to</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.InsertAfter">
            <summary>
            Returns an XmlWriter that will write element content after then current navigator position.
            Updates are only made to the database when close() is called on the given navigator.
            This only works if the navigator is positioned on an element and it is not positioned on the top most element of the hierarchy in the DbDocument being navigated.
            </summary>
            <returns>An XmlWriter that can be used for updating the database.  The XmlElements written must conform to the DbDocument specification</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.InsertBefore">
            <summary>
            Returns an XmlWriter that will write element content before then current navigator position.
            Updates are only made to the database when close() is called on the given navigator.
            This only works if the navigator is positioned on an element and it is not positioned on the top most element of the hierarchy in the DbDocument being navigated.
            </summary>
            <returns>An XmlWriter that can be used for updating the database.  The XmlElements written must conform to the DbDocument specification</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.DeleteRange(System.Xml.XPath.XPathNavigator)">
            <summary>
            No supported at the top of the element hierarchy or across secondary hierarchies.
            In the event that this fails an InvalidOperation exception is thrown.
            The Navigator is still moved to the parent but not all of the siblings requested will have been removed.
            </summary>
            <param name="lastSiblingToDelete">the last element to delete</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.ReplaceRange(System.Xml.XPath.XPathNavigator)">
            <summary>
            replaces the range specified with what is written to the writer.
            TODO : The Current implementation may delete one of the replace items if it is matched to one of the items being deleted.
            i.e. if an item being replaced has a NAME or REF that matches a replacement item it will be matched and then deleted.
            This implementation needs to be improved, the safest method is to delete what you want to delete and then insert new content.
            Nb no db updates occur until closed is called.
            When close is called the navigator will reposition itself to the same sequence position it was at when initially called.
            </summary>
            <param name="lastSiblingToReplace">the last element to delete</param>
            <returns>A writer to be used for writing elements to</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.SetTypedValue(System.Object)">
            <summary>
            Not yet supported, types only work if documents have been associated with schemas and validated.
            </summary>
            <param name="typedValue"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.ShowLimitedPseudoAttributes(System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            If a dictionary of element type to pseudo attributes is provided then ShowPseudoAttributes is set to true.
            The pseudo attributes shown on each element are then dictated by the dictionary given.
            If null is provided then ShowPseudoAttributes is set to false and no pseudo attributes are shown.
            </summary>
            <param name="etype2pseudoAtts">The pseudo attributes to show on each element type</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.RunXPath(System.String)">
            <summary>
            added to simplify XPath expression usage with namespaces.
            Throws XPath exceptions from XPathNavigator Compile() and Select() members.
            Assumes the XPath expression uses the default namespaces and prefixes specified in Namespaces
            </summary>
            <param name="xpath">The XPath Expression to evaluate</param>
            <returns>A Node iterator.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveTo(System.String)">
            <summary>
            Moves the navigator to the database element denoted by a given NAME attribute according to default search rules for duplicates
            </summary>
            <param name="name">The value of the NAME attribute to move to. including the leading '/'</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveTo(System.String,Aveva.Pdms.Database.DbType)">
            <summary>
            Moves the navigator to the database element denoted by a given NAME attribute ni a database with the specified type
            </summary>
            <param name="name">The value of the NAME attribute to move to. including the leading '/'</param>
            <param name="dbType">The database type</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveTo(System.String,System.String)">
            <summary>
            Moves the navigator to the database element denoted by a given NAME attribute ni a database with the specified type
            </summary>
            <param name="name">The value of the NAME attribute to move to. including the leading '/'</param>
            <param name="dbTypeName">The database type</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveTo(System.Int32[])">
            <summary>
            Moves the navigator to the database element denoted by a given dbref
            </summary>
            <param name="dbref">the integer components of a dbref</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.MoveTo(Aveva.Pdms.Database.DbElement@)">
            <summary>
            Moves the navigator to a given database element
            This doesn't cater for elements in secondary hierarchies.
            </summary>
            <param name="element">The element to move to</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.GetAttributeValueForCE(System.String)">
            <summary>
            Gets an attribute from the current element the navigator points to.
            If the navigator doesn't point to an element then an empty string is returned.
            </summary>
            <param name="att">The attribute to get</param>
            <returns>the attribute value or string.Empty</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.GetAttributeValueForCE(Aveva.Pdms.Database.DbAttribute)">
            <summary>
            Gets an attribute from the current element the navigator points to.
            If the navigator doesn't point to an element then an empty string is returned.
            </summary>
            <param name="att">The attribute to get</param>
            <returns>the attribute value or string.Empty</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.InScope(Aveva.Pdms.Database.DbElement@)">
            <summary>
            function to check that a dbelement is in scope of this navigator since the navigator
            may not have the world element as its head and dbref and names results may be in other dbs.
            </summary>
            <param name="element">the element to check</param>
            <returns>The Elements index value for the hierarchy root node managed by this iterator, -1 if not in scope.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.CheckElementCreationPosition(Aveva.Pdms.Database.Xml.DbDocumentNavigator)">
            <summary>
            Checks the location for element creation.
            </summary>
            <param name="owner">The owner of the element to create</param>
            <returns>The element type to create</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.CheckElementCreationDetails(System.String,System.String,System.String,System.String,Aveva.Pdms.Database.Xml.DbDocumentNavigator)">
            <summary>
            method to check whether or not we can create an element from the information given.
            Throws an exception if the information is not as required
            </summary>
            <param name="prefix">avdc or udet from XmlNamespaces</param>
            <param name="localName">The DbElementType</param>
            <param name="namespaceURI">avdc or udet namespace from XmlNamespaces</param>
            <param name="value">string.Empty or null (element values not supported in schema)</param>
            <param name="owner">The owner of the element to create</param>
            <returns>The element type to create</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.CheckElementCreationDetails(System.String,System.String,System.String,System.String)">
            <summary>
            method to check whether or not we can create an element from the information given.
            Throws an exception if the information is not as required
            </summary>
            <param name="prefix">avdc or udet from XmlNamespaces</param>
            <param name="localName">The DbElementType</param>
            <param name="namespaceURI">avdc or udet namespace from XmlNamespaces</param>
            <param name="value">string.Empty or null (element values not supported in schema)</param>
            <returns>The element type to create</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.CheckDeleteRange(System.Xml.XPath.XPathNavigator)">
            <summary>
            Before a DeleteRange or ReplaceRange is called this checks that the range makes sense.
            </summary>
            <param name="lastSiblingToDelete"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.ReplaceWriter_CloseCompleted(System.Object,System.EventArgs)">
            <summary>
            moves the navigator when the write is complete
            </summary>
            <param name="sender">The writer used in replace range</param>
            <param name="e"></param>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NodeType">
            <summary>
            The node type being navigated
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.LocalName">
            <summary>
            The local name of the current node
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.Name">
            <summary>
            The fully qualified name of the current node
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NamespaceURI">
            <summary>
            the full namespace of the current node
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.Prefix">
            <summary>
            the namespace prefix for the current node
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.Value">
            <summary>
            the text value of the current node
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.BaseURI">
            <summary>
            String.Empty
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.IsEmptyElement">
            <summary>
            returns !Haschildren
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.XmlLang">
            <summary>
            en
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NameTable">
            <summary>
            The nametable for the current document
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.HasAttributes">
            <summary>
            returns true if the current node has attributes
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.HasChildren">
            <summary>
            true if the current node has child elements
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.UnderlyingObject">
            <summary>
            Only a one to one for metadata objects and DbElements
            This returns XmlNodes for Metadata nodes and DbElements for XmlElements realting to Database objects
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.CanEdit">
            <summary>
            Indicates the database can be edited using the navigator
            This is always set to true.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.InnerXml">
            <summary>
            Gets the inner XML of the current navigator.
            the Set is not supported since it has potential to leave the database in an unknown state if it fails.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.OuterXml">
            <summary>
            Gets the outer XML of the current navigator
            the Set is not supported since it has potential to leave the database in an unknown state if it fails.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NamespaceManager">
            <summary>
            Provides access to a namespace manager for use with XPathExpressions when using the Select and Evaluate methods.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.ShowPseudoAttributes">
            <summary>
            If set to true then Pseudo attribute are made available in the navigator
            If set to false the Pseudo attributes are ignored.
            Nb if currently navigating an attribute node the navigator is moved to the parent element if this property is changed.
            NB If setting this to true then DisplayAttributes is set to false.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.ExpandSecondaryHierarchy">
            <summary>
            If set to true then the secondary hierarchy is expanded once on navigation
            If set to false then secondary hierarchies are ignored.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.ReferencesAsNames">
            <summary>
            If true then DbElement reference attributes are output as names and not ref values.
            IF an item is unamed it is output as per normal database practice e.g. 'SCEQUI 1 of SCGROUP 2 of /*'
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.ResolvableNames">
            <summary>
            If true then unnamed items will be represented as their REF in reference attributes even if ReferencesAsNames is true.
            e.g. the output will contain =1234/12345 instead of 'SCEQUI 1 of SCGROUP 2 of /*'
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.ShowDisplayAttributes">
            <summary>
            Sets this navigator to only output display attributes.
            Nb if currently navigating an attribute node the navigator is moved to the parent element if this property is changed.
            Nb If setting this to true then the ShowPseudoAttributes is set to false.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.DbElement">
            <summary>
            gets the DbElement that the navigator currently points to.
            This is null if the navigator points at metadata elements or the document root element.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.DbAttribute">
            <summary>
            Accesses the attribute this navigator cuirrently points to or returns null.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.AtTop">
            <summary>
            Indicates whether or not a DbDocumentNavigator is current situated at a top level DbElement in the document
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NodeTypes">
            <summary>
            The Node types present in a Dabacon XML representation.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NodeTypes.Root">
            <summary>
            The root node
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NodeTypes.Element">
            <summary>
            An element node
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NodeTypes.Attribute">
            <summary>
            An Attribute node
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NodeTypes.Namespace">
            <summary>
            A namespace node
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.#ctor(Aveva.Pdms.Database.DbElement[],System.String)">
            <summary>
            Constructor to set the given elements as the root db elements wrapped by this navigator.
            </summary>
            <param name="elements">An array of db elements.  These must not be in the hierarchies of each other.</param>
            <param name="schemaLocation">the full pathname of the schema or String.Empty</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.#ctor(Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState)">
            <summary>
            constructor to create a shallow copy of another state class.
            </summary>
            <param name="NavState"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.ShowLimitedPseudoAttributes(System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            Sets ShowPseudoAttributes to true but only outputs the attributes on the element types in the dictionary
            </summary>
            <param name="etype2pseudoAtts">A map form DbElementType to the Pseudo attributes to output</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.GetSecondaryHierarchy(Aveva.Pdms.Database.DbElement)">
            <summary>
            Gets the secondary hierarchy navigator for the current element
            </summary>
            <param name="element">The element to create a navigator for</param>
            <returns>the navigator for the CE's secondary hierarchy</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.MoveToRoot">
            <summary>
            Moves the navigator to the root node.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.GetAttribute(System.String,System.String)">
            <summary>
            returns the value of the requested attribute
            </summary>
            <param name="localName">the attribute to get the value for</param>
            <param name="namespaceURI">the namespace of the attribute to get</param>
            <returns>The value of the attribute requested or string.Empty</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.MoveToFirstAttribute">
            <summary>
            Moves the navigator to the first attribute of the current element
            </summary>
            <returns>true if moved, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves the navigator to the requested attribute of the current element
            </summary>
            <param name="localName">the name of the attribte to move to.</param>
            <param name="namespaceURI">the namespace of the attribute</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.MoveToNextAttribute">
            <summary>
            Moves the navigator to the next attribute
            only works if operating the attribtues of CE
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.RootNodesMatch(Aveva.Pdms.Database.DbElement[])">
            <summary>
            checks a dbelement array against the hierarchy root elements in this navigator
            </summary>
            <param name="elements">the elements to check</param>
            <returns>true if they are the same, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.GetAttributeValueForCE(Aveva.Pdms.Database.DbAttribute,System.Boolean)">
            <summary>
            Gets the value of an attribute for CE.
            Nb CE must not be null.
            </summary>
            <param name="att">The attribute to get the value of</param>
            <param name="ownerref">set to true if the ownerreference attribute is required instead of owner</param>
            <returns>the attribute value converted to a string.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.InsertTopElementAfter(Aveva.Pdms.Database.DbElement)">
            <summary>
            Inserts a top element into the navigator.
            this is only done when items are created using the navigator
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.InsertTopElementBefore(Aveva.Pdms.Database.DbElement)">
            <summary>
            Inserts a top element into the navigator
            This is only done when items are created using the navigator
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.RemoveInvalidTopElements">
            <summary>
            removes any deleted or invalid top elements that have been invalidated by editing the Navigator
            Nb this must only be called when the navigator is not positioned on a dbElement since it doesn't clean up associated state
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.DBREF(Aveva.Pdms.Database.DbElement[])">
            <summary>
            Converts a set of elements into a string representation of a DBREF array
            </summary>
            <param name="elements">The elements to convert</param>
            <returns>a string representation of the refno's given or Nulref</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.GetResolvableNames(Aveva.Pdms.Database.DbElement[])">
            <summary>
            Converts a set of elements into a string representation of a their NAMES and REFs array
            If element sare named their NAME is output otherwise REF is output
            </summary>
            <param name="elements">The elements to convert</param>
            <returns>a string representation of the elements given or Nulref</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.FindAttribute(Aveva.Pdms.Database.DbAttribute[],Aveva.Pdms.Database.DbAttribute)">
            <summary>
            finds a given attribute in a set of attributes
            </summary>
            <param name="attributes">The set of attributes to find it in.</param>
            <param name="att">The attribute to find</param>
            <returns>-1 if not found or the index of the attribute</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.GetAdditionalAttributes(Aveva.Pdms.Database.DbElement,System.Boolean)">
            <summary>
            Gets the DbAttributes for an element that are added by the navigator
            This includes REF and may include ACTTYP so the user can check for UDETs
            Nb OWNER is added twice, first time it is output it is output as a name, second time as the reference
            </summary>
            <param name="element">the element to get the attributes for</param>
            <param name="withPseudos">If with pseudos that ACTTYPE attribute isn't added since it is part of the pseudos collection</param>
            <returns>An array of additional attributes navigated across</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.GetSystemAttributes(Aveva.Pdms.Database.DbElement)">
            <summary>
            Gets the system defined attributes for an element
            </summary>
            <param name="element">the element to get the system attributes for</param>
            <returns>the array of system attributes for the element provided</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.GetUserDefinedAttributes(Aveva.Pdms.Database.DbElement)">
            <summary>
            Gets the user defined attribute for an element
            </summary>
            <param name="element">the element to get the user defined attributes for</param>
            <returns>the array of UDAs for the element provided</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.GetPseudoAttributes(Aveva.Pdms.Database.DbElement)">
            <summary>
            Gets the pseudo attributes for an element
            </summary>
            <param name="element">the element to get the pseudo attributes for</param>
            <returns>the array of Pseudo attributes for the element provided</returns>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.CE">
            <summary>
            The current element of the navigator
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.DbAttribute">
            <summary>
            The Database attribute this navigator currently points to.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.Db">
            <summary>
            The database of the current element or null if ce is null
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.AdditionalAttributes">
            <summary>
            The additional attributes of CE
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.SystemAttributes">
            <summary>
            The system attributes of CE
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.UserDefinedAttributes">
            <summary>
            The uda attributes of CE
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.PseudoAttributes">
            <summary>
            The pseudo attributes of CE
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.TopDbElements">
            <summary>
            The root DbElements at the top of the document
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.AtDocumentNode">
            <summary>
            true if on the DbDocument element
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.AttributeIndex">
            <summary>
            The index of the attribute currently viewed or -1 if navigating a different node type.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.NamespaceIndex">
            <summary>
            The index of the namespace being navigated or -1
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.ElementsIndex">
            <summary>
            The index of the element being navigated
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.SchemaLocation">
            <summary>
            The value of the schemaLocation attribute for the DbDocument
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.CreationTime">
            <summary>
            The CreationTime attribute of the DbDocument element
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.Node">
            <summary>
            The type of node being navigated
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.ShowPseudoAttributes">
            <summary>
            A flag indicating whether or not pseudo attributes are being output
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.ExpandSecondaryHierarchy">
            <summary>
            a flag indicating whether or not secondary hierarchy members are included in the hierarchy output
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.ReferencesAsNames">
            <summary>
            outputs references attributes using GetAsString(RefAtt);
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.ResolvableNames">
            <summary>
            outputs references attributes using their NAMES for named elements and REFs for unnamed elements
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.ShowDisplayAttributes">
            <summary>
            outputs only the display attributes
            this sets ShowPseudoAttributes to false
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.SecondaryHierarchy">
            <summary>
            The navigator used for navigating the current secondary hierarchy
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.HasSchema">
            <summary>
            Indicates whether we know about a schema file for this DbDocument
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.Value">
            <summary>
            returns the text value of the current node
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.Name">
            <summary>
            returns the qualified name of the current node
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.LocalName">
            <summary>
            returns the unqualified name of the current node
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.Prefix">
            <summary>
            returns the namespace prefix of the current node
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.NamespaceURI">
            <summary>
            Returns the namespace for the node.
            </summary>			
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.Metadata">
            <summary>
            Returns the navigator for the project metadata
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentNavigator.NavigatorState.MetadataRootTagName">
            <summary>
            Returns the tagname of the metadata root node
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.DbDocumentWriter">
            <summary>
            Class initially written to support the write extensions to the XPathNavigator class
            The Database is only written to when close is called
            Once close is called all information and error messages associated with the updated are available form the LogMessages property
            All of these messages are also available from the XmlIOLogger class
            The overall status of the update is available from the WriteStatus property
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.#ctor">
            <summary>
            If writing a complete DbDocument then use this constructor.
            For an update to work the full DbDocument content as defined in the HLD must be written using the writer
            Nb this performs a full DbDocument so elements will be matched and updated when close is called.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.#ctor(Aveva.Pdms.Database.DbElement,Aveva.Pdms.Database.Xml.DbDocumentWriter.ContextLocation)">
            <summary>
            If writing a fragment of a DbDocument for the creation of a couple of elements then use this constructor.
            This creates the necessary DbDocument element and context information so that only the elements to be created need to be written
            to the writer.
            </summary>
            <param name="contextElement"></param>
            <param name="contextLocation"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.#ctor(Aveva.Pdms.Database.DbElement,Aveva.Pdms.Database.Xml.DbDocumentWriter.ContextLocation,System.Collections.Generic.List{Aveva.Pdms.Database.DbElement})">
            <summary>
            If writing a fragment of a DbDocument for the creation of a couple of elements then use this constructor.
            This creates the necessary DbDocument element and context information so that only the elements to be created need to be written
            to the writer.
            This will also write any delete entries required
            </summary>
            <param name="contextElement"></param>
            <param name="contextLocation"></param>
            <param name="deleteElements">Elements to delete when the writer is closed.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.Close">
            <summary>
            See XmlWriter
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.Flush">
            <summary>
            See XmlWriter
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.LookupPrefix(System.String)">
            <summary>
            See XmlWriter
            </summary>
            <param name="ns"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            See XmlWriter
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteCData(System.String)">
            <summary>
            See XmlWriter
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteCharEntity(System.Char)">
            <summary>
            See XmlWriter
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            See XmlWriter
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteComment(System.String)">
            <summary>
            See XmlWriter
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteDocType(System.String,System.String,System.String,System.String)">
            <summary>
            See XmlWriter
            </summary>
            <param name="name"></param>
            <param name="pubid"></param>
            <param name="sysid"></param>
            <param name="subset"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteEndAttribute">
            <summary>
            See XmlWriter
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteEndDocument">
            <summary>
            See XmlWriter
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteEndElement">
            <summary>
            See XmlWriter
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteEntityRef(System.String)">
            <summary>
            See XmlWriter
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteFullEndElement">
            <summary>
            See XmlWriter
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>
            See XmlWriter
            </summary>
            <param name="name"></param>
            <param name="text"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteRaw(System.String)">
            <summary>
            See XmlWriter
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
            <summary>
            See XmlWriter
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>
            See XmlWriter
            </summary>
            <param name="prefix"></param>
            <param name="localName"></param>
            <param name="ns"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteStartDocument(System.Boolean)">
            <summary>
            See XmlWriter
            </summary>
            <param name="standalone"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteStartDocument">
            <summary>
            See XmlWriter
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            See XmlWriter
            </summary>
            <param name="prefix"></param>
            <param name="localName"></param>
            <param name="ns"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteString(System.String)">
            <summary>
            See XmlWriter
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
            <summary>
            See XmlWriter
            </summary>
            <param name="lowChar"></param>
            <param name="highChar"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteWhitespace(System.String)">
            <summary>
            See XmlWriter
            </summary>
            <param name="ws">whitespace</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteDeleteElement(Aveva.Pdms.Database.DbElement)">
            <summary>
            writes a delete record for the given element, nb this must be after all create/update entries
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteDeleteElements(System.Collections.Generic.ICollection{Aveva.Pdms.Database.DbElement})">
            <summary>
            Write delete entries for a collection of given elements, Nb this must be after all create/update entries have been written.
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.CreateWriter">
            <summary>
            Creates the underlying writer to use for writing to the db.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteFullDbElement(Aveva.Pdms.Database.DbElement)">
            <summary>
            Writes a complete DbElement with its attributes (excluding members), this ends the element.
            </summary>
            <param name="element">the element to write</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteOpenDbElement(Aveva.Pdms.Database.DbElement)">
            <summary>
            Writes a DbElement with its attributes, this leaves the element open for child elements
            </summary>
            <param name="element">the element to write</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.RaiseCloseCompleted">
            <summary>
            Raises the CloseCompleted event to any subscribers
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbDocumentWriter.RaiseCloseFailed">
            <summary>
            Raises the CloseFailed event to any subscribers
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteState">
            <summary>
            See XmlWriter
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentWriter.LogMessages">
            <summary>
            Messages associated with the update using the writer
            Nb these are only generated when Close is called
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentWriter.WriteStatus">
            <summary>
            The overall status of the Xml content written.
            Note this is only updated after close has been called.
            </summary>
        </member>
        <member name="E:Aveva.Pdms.Database.Xml.DbDocumentWriter.CloseCompleted">
            <summary>
            Event raised when the close operation has successfully updated the database
            Nb this maybe an update with warnings.
            </summary>
        </member>
        <member name="E:Aveva.Pdms.Database.Xml.DbDocumentWriter.CloseFailed">
            <summary>
            Event raised when the close operation has failed to update the database
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentWriter.ContextOwner">
            <summary>
            Gets the owner element of the initial context element.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbDocumentWriter.ContextSequ">
            <summary>
            The Sequence number of the context element before update occurred
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.DbDocumentWriter.ContextLocation">
            <summary>
            The location of the XML elements in relation to a given context element on construction of the writer
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.DbDocumentWriter.ContextLocation.PrependAsChild">
            <summary>
            Add written content as the first child of the context element
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.DbDocumentWriter.ContextLocation.AppendAsChild">
            <summary>
            Add written content as the last child of the context element
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.DbDocumentWriter.ContextLocation.InsertBefore">
            <summary>
            Insert written content as elements before the context element
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.DbDocumentWriter.ContextLocation.InsertAfter">
            <summary>
            Insert written content as element after the context element
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.DbElementNode">
            <summary>
            This class provides methods to correlate, update and delete database contents
            given an XmlNode from an XMLDabacon DbDocument XML document.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.#cctor">
            <summary>
            Adds any word attributes that we know about that need to be treated as reference attributes
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.#ctor(System.Xml.XmlNode,Aveva.Pdms.Database.Xml.DbDocument)">
            <summary>
            Constructor
            </summary>
            <param name="node">the XmlNode to wrap</param>
            <param name="dbDocument">The DbDocument this nod is part of</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.GetWorldType">
            <summary>
            If this element represent a WORLD node then this tries to obtain
            the Database type information by parsing the document metadata.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.WorldOwner">
            <summary>
            If the root of the hierarchy has no placement information this
            attempts to place it in the first appropriate writeable world element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.SetXmlDbref">
            <summary>
            Sets the DBREF attribute in the XML based on the DbElement property
            If DbElement returns null the DBREF is removed from the XML
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.SetXmlName">
            <summary>
            Sets the NAME attribute in the XML based on the DbElement property
            This only sets the name attribute if it doesn't exist in the XML.
            This enables elements to be renamed during the import process.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.SetXmlOwnerAttributes">
            <summary>
            This uses the XML context to set the OWNER and OWNERREF attributes of the current node
            The OWNER and OWNERREF attributes may be removed by this process.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.RemoveXmlOwnerAttributes">
            <summary>
            Removes the OWNER and OWNERREF xml attributes from the wrapped XML node.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.SetXmlToMatch(Aveva.Pdms.Database.DbElement)">
            <summary>
            This method sets the REF, NAME(if not set), OWNER and OWNERREF on the XMLNode wrapped
            by this instance to match the DbElement provided.
            This doesn't change the XML context of the item if the owner doesn't match the attributes set
            </summary>
            <param name="element">The dbelement to take the attributes from.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.TypeOk(Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            Validates that the TYPE and ACTTYPE in the XML file are recognised and that it is valid in the
            parent and matched contexts.
            Note : Assumes the owner element has already been validated.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.AttributesOk(System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
             <summary>
             validates the attributes of the XmlNode against the derived elementType.
             If an attribute is invalid it is removed from the given node.
            
             TODO check the attribute matches the type constraints.? does this matter, just throws a warning on import.
             TODO check referential integrity of reference attributes.?
             </summary>
             <param name="pseudoAttributes">The pseudo attributes permitted alongside the system attributes and udas</param>
             <returns>true if the attributes are ok, false if attributes have been removed.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.UpdateDb(System.Boolean,System.Boolean,Aveva.Pdms.Database.Xml.ImportStatus@,System.Boolean)">
             <summary>
             Updates the database from the XmlNode that this contains.
             This updates either reference attributes or non-reference attributes.
            
             side effects :
             This updates the XmlNode with REF and NAME attributes if references is false
             The element is only moved if references is true.
             </summary>
             <param name="references">If set to false non-reference attributes are updated, otherwise only reference attributes are updated.</param>
             <param name="partialElement">only update the attributes given if true, otherwise default attributes not provided</param>
             <param name="result">succes, error, warning status for the update</param>
             <param name="withChildren">if true then the child nodes are alos used to update the database.</param>
             <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.CreateDbElement(Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            Creates a database element to match the XmlNode wrapped by this instance.
            </summary>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.PositionDbElement(Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            Checks the element is in an appropriate position in its parent.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.UpdateAttributes(System.Boolean,System.Boolean,Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            This updates the database element attributes from a given XML node.
            </summary>
            <param name="references">true if reference attributes, false if non-reference attributes</param>
            <param name="partialElement">if true then this doesn't default attribtues not provided.</param>
            <param name="result">succes, error, warning status of the update</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.GetXmlAttributeValue(System.String,System.String)">
            <summary>
            returns String.Empty or the value of the named attribute.
            </summary>
            <param name="attName">the name of the attribute to retrieve frmo the XML node.</param>
            <param name="namespaceURI">the namespace of the attribute to retrieve, or String.Empty</param>
            <returns>String.Empty or the attribute value</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.SetXmlAttributeValue(System.String,System.String,System.String)">
            <summary>
            Sets the XML attribute specified to the value given
            </summary>
            <param name="attName">The XML name of the attribute</param>
            <param name="namespaceURI">The namespace for the attribute</param>
            <param name="newValue">if null the attribute is removed.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.SetXmlAttribute(System.String,System.String)">
            <summary>
            Sets the XML attribute specified to the value given
            </summary>
            <param name="dbAttName">The DbAttribute name</param>
            <param name="newValue">if null the attribute is removed.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.Match(System.String,System.String,Aveva.Pdms.Database.DbType[])">
            <summary>
            Returns a Database element or null given a DBREF and NAME
            Nb DBREF takes precendence over NAME
            </summary>
            <param name="dbref"></param>
            <param name="name"></param>
            <param name="dbtypes">the database types the owner is allowed to be stored in</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.PermittedMemberType(Aveva.Pdms.Database.DbElementType,Aveva.Pdms.Database.DbElementType)">
            <summary>
            Checks that a given type is permitted as a member of a given owner type.
            </summary>
            <param name="owner">The DbElementType instance for the owner element</param>
            <param name="member">The DbElementType instance for the member element</param>
            <returns>true if ok, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.MatchToDbs(System.Xml.XmlNode,Aveva.Pdms.Database.Xml.ISrcFile,Aveva.Pdms.Database.Xml.DbDocument,Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            This performs a match for a given node in the DbDocument.
            </summary>
            <param name="node">The document element to match to the db</param>
            <param name="srcfile">The ISrcFile being imported</param>
            <param name="dbDoc">The DbDocument</param>
            <param name="result">success, error, warning status</param>
            <returns>true unless there were errors</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.MatchToDbs(Aveva.Pdms.Database.Xml.ISrcFile,Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            Performs a match to the database for this node and the XMLNodes child nodes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.ClearDbAttributes">
            <summary>
            Removes all Attributes from the XmlElement except for the DBREF, NAME, OWNER and OWNERREF attributes.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.GetNormalisedAttributeName(System.String,System.String@,System.String@)">
            <summary>
            Utility method to convert an attribute name to name and nameSpace if it is a UDA
            </summary>
            <param name="attName">The DbAttribute name</param>
            <param name="newAttName">The attribute name for the XML</param>
            <param name="nameSpace">The XML namespace for the DbAttribute</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.MergeDbAttributesFrom(Aveva.Pdms.Database.DbElement)">
            <summary>
            Merges any attributes that need to be retained from the database onto this node.
            This is only attributes that the load code may not be responsible for.
            This is specific according to the type of element.
            </summary>
            <param name="element">The element to copy publish attributes from.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.DbElementNode.MergeAllAttributesFrom(Aveva.Pdms.Database.DbElement)">
            <summary>
            For all attributes not present in the XML the attributes are copied from
            the given element if not at their default value.
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.XmlNode">
            <summary>
            The XmlNode that this DbElementNode wraps
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.DbElement">
            <summary>
            Access the DbElement associated with this node,
            this is null if
            the node doesn't have a DBREF or the DBREF isn't in the databases,
            or the node doesn't have NAME or the NAME isn't in the databases,
            or the node isn't a WORLD element or no writeable WORLD to match the worlds type can be found.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.DbElementType">
            <summary>
            Returns the element type for this node.
            This will try to return the type using the DbElement associated with this node.
            May return null, if a valid type can't be determined.
            If no DbElement is associated with this node the ElementType is derived from the XML content
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.DbElementTypeFromXml">
            <summary>
            Returns the element type for this node derived purely from the wrapped XML object.
            This may return null if the type cannot be derived.
            The type returned is the base type for the element and not the actual type.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.ActualType">
            <summary>
            Returns the element type for this node.
            This will try to return the type using the DbElement associated with this node.
            May return null, if a valid type can't be determined.
            If no DbElement is associated with this node the ElementType is derived from the XML content
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.ActualTypeFromXml">
            <summary>
            Returns the element type for this node derived purely from the wrapped XML object.
            This may return null if the type cannot be derived.
            The type returned is the base type for the element and not the actual type.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.NAME">
            <summary>
            Provides access to the value of the NAME attribute in the XmlNode
            Nb this is likely to be a 'load only' temporary name.
            The NAME is used for referential integrity of the source file.
            If a users wishes to be something else then it may not be possible to retain referential integrity during the load and fulfill the user requirements.
            For this reason NAME is provided as the initial referentially sound attribute while name is the users request.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.name">
            <summary>
            Provides access to the value of the name attribute in the XmlNode
            Nb this is the user requested name.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.DBREF">
            <summary>
            Provides access to the value of the DBREF attribute in the XmlNode
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.OWNER">
            <summary>
            Provides access to the value of the OWNER attribute in the XmlNode
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.OWNERREF">
            <summary>
            Provides access to the value of the OWNERREF attribute in the XmlNode
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.TYPE">
            <summary>
            Provides access to the TYPE from the XmlNode (LocalName or TYPE attribute)
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.ACTTYPE">
            <summary>
            Provides access to the ACTTYPE from the XmlNode (string.Empty or ACTTYPE attribute)
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.IsUDET">
            <summary>
            Checks the namespace of the XmlNode to determine whether or not the element is a UDET
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.DbTypes">
            <summary>
            The list of database types that this element may be stored in.
            Nb this is based on its TYPE.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.OwnerDbElement">
            <summary>
            Returns the OwnerDbElement based on the XML context.
            If the element is a child of the root node then the result will be the
            element identified by the OWNERREF, OWNER, parent of the matched element or
            the first writeable World element for the element type.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.OwnerNode">
            <summary>
            Returns an instance of a DbElementNode for the parent of this node.
            Nb each call will return a new instance.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.PreviousDbElement">
            <summary>
            returns the DbElement for the previous XmlNode.
            Nb this only works if the previous node has been created/exists in the database
            If the previous node doesn't have an apporpriate dbElement then null is returned.
            </summary>
            <returns>the DbElement in the database prior to this one in the XmlDocument, or null</returns>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.DbElementNode.DbAttributesNotInXML">
            <summary>
            Provides the set of attributes from the elementType that are not
            present in the XmlNode wrapped by this instance.  This includes UDAs
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.FileIO">
            <summary>
            Abstract file handling class for common logging and behaviour
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.FileIO.m_installDir">
            <summary>
            placeholder to store the installation directory in its expanded form
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.FileIO.m_xsdCache">
            <summary>
            A cache of loaded xsd files stored as XmlSchema instances
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.FileIO.m_xsdCacheInfo">
            <summary>
            A cache of LastWrite times for the schema files
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.FileIO.m_xslCache">
            <summary>
            A cache of loaded xsl files stored as XslCompiledTransform instances
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.FileIO.m_xslCacheInfo">
            <summary>
            A cache of LastWrite times for the XSL files
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.FileIO.m_validXmlCache">
            <summary>
            A cache of loaded and validated xml files stored as XmlDocument instances
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.FileIO.m_validXmlCacheInfo">
            <summary>
            A cache of LastWrite times for the validated XML files
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.FileIO.m_xmlCache">
            <summary>
            A cache of loaded xml files stored as XmlDocument instances
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.FileIO.m_xmlCacheInfo">
            <summary>
            A cache of LastWrite times for the XML files
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.GetResourcesDirectory">
            <summary>
            Expands the PDMSEXE environment variable to determine where
            the pdms installation folder is.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.XmlSchemaSet(System.Collections.Generic.List{System.Xml.Schema.XmlSchema})">
            <summary>
            Takes a list schema  instances and returns a compiled schema set object.
            If the set is invalid or there are problems with the schemas then null is returned.
            </summary>
            <param name="schemas">The list of filenames to create the schema set from.</param>
            <returns>A valid, compiled schema set or null if problems are encountered.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.XmlSchemaSet(System.String[])">
            <summary>
            Takes a list of filenames for schema files and returns a schema set object.
            IF the set is invalid or there are problems loading any of the schema files then null is returned.
            </summary>
            <param name="schemas">The list of filenames to create the schema set from.</param>
            <returns>A valid, compiled schema set or null if problems are encountered.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.XSD(System.String)">
            <summary>
            Gets an XmlSchema instance for the filename provided.
            If possible this is returned from the schema cache.
            If the file cannot be loaded any errors will be logged and null returned.
            Nb the returned instance should not be edited as it will affect
            other users of the same object.
            </summary>
            <param name="filename">The filename of the XSD file to load.</param>
            <returns>null or the XmlSchema instance</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.XSDUncached(System.String)">
            <summary>
            Gets an XmlSchema instance for the filename provided.
            If the file cannot be loaded any errors will be logged and null returned.
            </summary>
            <param name="filename">The filename of the XSD file to load.</param>
            <returns>null or the XmlSchema instance</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.CurrentFileCached(System.String,System.String@,System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            Checks to see if the given file has been cached and the cached version matches the disk.
            </summary>
            <param name="filename">The filename of the file to check</param>
            <param name="fullFilename">The full filename of the file (expanded)</param>
            <param name="fileCache">The file cache to check</param>
            <param name="fileCacheInfo">The cache of file info to check</param>
            <returns>true if cached ok, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.XSL(System.String)">
            <summary>
            Returns the transform XSLT file requested.
            If already loaded the cached transform is provided otherwise
            the transform is loaded and cached for further use
            Nb the returned instance should not be edited as it will affect
            other users of the same object.
            </summary>
            <param name="filename">The filename of the XSL file to load (as a URL).</param>
            <returns>The XslCompiledTransform object for the filename provided or null if the file couldn't be loaded.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.XMLUncached(System.String)">
            <summary>
            Returns the XML file requested.
            This doesn't perform schema validation and the XML file is not cached for later use.
            </summary>
            <param name="filename">The filename of the XML file to load (as a URL).</param>
            <returns>The XmlDocument object for the filename provided or null if the file couldn't be loaded.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.XML(System.String,System.Xml.Schema.XmlSchemaSet,System.Boolean@)">
            <summary>
            Returns the XML file requested and validates it against the given schema file.
            If already loaded the cached file is provided otherwise
            the file is loaded and if valid cached for further use
            Nb the returned instance should not be edited as it will affect
            other users of the same object.
            </summary>
            <param name="filename">The filename of the XML file to load (as a URL).</param>
            <param name="schemaSet">The schemas to use for validation of the XML file.</param>
            <param name="valid">set to true if the file passed schema validation, false if not</param>
            <returns>The XmlDocument object for the filename provided or null if the file couldn't be loaded</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.XMLUncached(System.String,System.Xml.Schema.XmlSchemaSet,System.Boolean@)">
            <summary>
            Returns the XML file requested and validates it against the given schema file.
            If already loaded the cached file is provided otherwise
            the file is loaded and if valid cached for further use
            Nb the returned instance should not be edited as it will affect
            other users of the same object.
            </summary>
            <param name="filename">The filename of the XML file to load (as a URL).</param>
            <param name="schemaSet">The schemas to use for validation.</param>
            <param name="valid">set to true if the file passed schema validation, false if not</param>
            <returns>The XmlDocument object for the filename provided or null if the file couldn't be loaded</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.XML(System.String)">
            <summary>
            Returns the XML file requested.
            If already loaded the cached file is provided otherwise
            the file is loaded and cached for further use
            Nb the returned instance should not be edited as it will affect
            other users of the same object.
            No validation is performed on the document
            </summary>
            <param name="filename">The filename of the XML file to load (as a URL).</param>
            <returns>The XmlDocument object for the filename provided or null if the file couldn't be loaded.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.RemoveFromCache(System.String)">
            <summary>
            Removes a file and its resources from all of the file caches
            </summary>
            <param name="fullFilename">The full filename of th efile as returned by FileInfo.Fullname</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.ToXmlSchema(System.Xml.XmlDocument)">
            <summary>
            Reads an XmlDocument and converts it to an XmlSchema
            </summary>
            <param name="doc">The document to convert</param>
            <returns>the XmlSchema generated or null if the schema is not valid</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.PrettyPrint(System.Xml.XmlDocument)">
            <summary>
            pretty prints an Xml document
            </summary>
            <param name="doc">the document to format</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.ChangeNamespace(System.Xml.XmlDocument,System.String,System.String,System.String)">
            <summary>
            Used to change the namespace of the document from the pre-SP5 P&amp;ID Manager namespace to the SMM namespace
            </summary>
            <param name="doc">The document to change the namespace of</param>
            <param name="oldnspace">The old namespace</param>
            <param name="newnspace">The new namespace</param>
            <param name="newprefix">The new prefix</param>
            <returns>The created document</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.ChangeNamespace(System.Xml.XmlDocument,System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            Changes the namespace of a node for insertion into a new document
            The clones the node and its child nodes
            </summary>
            <param name="context">The new document being created</param>
            <param name="node">The current working node to clone</param>
            <param name="oldnspace">The old namespace</param>
            <param name="newnspace">The new namespace</param>
            <param name="newprefix">The prefix for the new namespace</param>
            <returns>The cloned node</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.Validate(System.Xml.XmlDocument,System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Undertakes schema validation on the given XmlDocument
            </summary>
            <param name="doc">the document to validate</param>
            <param name="schemaSet">the schemas to use for validation</param>
            <returns>true no schema errors were detected, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.CheckSchemasForFile(System.String,System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Checks the SchemaSet given to validate a file and reports errors if they can't be compiled.
            </summary>
            <param name="fullFilename">the filename of the file the schemas are to be used on.</param>
            <param name="schemaSet">the schema set to check</param>
            <returns>true if the schemas are ok, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.SplitSearchPath(System.String)">
            <summary>
            splits a search path into its component parts such as the expanded PDMSEXE
            </summary>
            <param name="path">the expanded path to split</param>
            <returns>the list of elements making up the search path</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.FileIO.ResolveSearchPath(System.String,System.String)">
            <summary>
            Finds the first path in a search path that contains a given directory or file, or if the directory
            doesn't exist in any returns the first path from the search path.
            </summary>
            <param name="searchPath">The expanded search path</param>
            <param name="dirOrFile">The directory or file to search for</param>
            <returns>string.Empty, the first path that contains the specified directory/file or the first path from the search path if the directory wasn't found.</returns>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.FileIO.ResourcesDirectory">
            <summary>
            Returns the %PDMSEXE% installation folder as the location of the resources for
            Aveva.Database.Xml.
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.IImportPlugin">
             <summary>
             This class permits application specific logic to be
             implemented during a generic DbDocument import.
            
             Extending classes may add the logic that they require
             which will be executed during the import process.
            
             Where methods are stated as being performed outside of
             the transactions the plugin is responsible for any transactional
             rollback
            
             The Conversion process :-
            
            		PreImportProcessing ()
            		Foreach SrcFile
            			PreImportProcessing ()
            			SetConversionParameters ()
            			Convert to DbDocument
            			PreMatchProcessing ()
            			Generic database matching
            			PreUpdateProcessing ()
            			Generic database update
            			PostImportProcessing()
            		End foreach
            		PostImportProcessing()
            		
             Alternative Paths :-
            
               The Import may be aborted by the PreImportProcessing in this case the execution path is as follows
            
            		PreImportProcessing()
            		ImportAborted()
            	
               The Import may be cancelled during execution.  This will allow the current activity to complete and then
               the ImportCancelled method will be called.  The generic code will keep the transactions already completed
               rather than rolling everything back
            
               The import may be rolledback.  All transactions will be rolled back and then ImportRolledBack will be called.	
            
              Notes :-
            		Most methods take both the SrcFile instance and the DbDocument associated with the SrcFile
            		Since the document contents are edited as the process proceeds calling srcfile.Document and the document parameter
            		may not provide the same result.
            		Srcfile.Document will also try to reload the document from disk if it has changed during the import.
            		
             </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.IImportPlugin.PreImportProcessing(Aveva.Pdms.Database.Xml.SrcFileCollection,Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            This is called before any processing is undertaken for an import.
            Any import initialisation should be performed here.
            This is performed outside of the update transactions
            </summary>
            <param name="fileCollection"></param>
            <param name="result"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.IImportPlugin.PreImportProcessing(Aveva.Pdms.Database.Xml.ISrcFile,Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            This method provides additional application specific pre-processing
            before any processing for a given srcfile.
            This is performed outside of the managed update transaction
            </summary>
            <param name="srcfile">The srcfile that has just been imported</param>
            <param name="result">The import status for the srcfile import</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.IImportPlugin.SetConversionParameters(Aveva.Pdms.Database.Xml.ISrcFile,System.Collections.Hashtable,Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            This is used to populate the conversion parameters that will be passed to the
            XmlDabacon conversion method on the SrcFile being imported. These parameters
            may be plugin specific.
            This is performed outside of the managed update transaction.
            </summary>
            <param name="srcfile">The SrcFile which the conversion parameters will be passed to</param>
            <param name="parameters">The parameters to be set</param>
            <param name="result">The current status for the srcfile import</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.IImportPlugin.PreMatchProcessing(Aveva.Pdms.Database.Xml.ISrcFile,Aveva.Pdms.Database.Xml.DbDocument,Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            This method enables additional post conversion, application specific processing
            before the file contents are matched to the database.
            This is performed outside of the managed update transaction.
            </summary>
            <param name="srcfile">The current srcfile being imported</param>
            <param name="xmlDabacon">The DbDocument xml document</param>
            <param name="result">The import status for the srcfile import</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.IImportPlugin.PostElementMatch(Aveva.Pdms.Database.Xml.ISrcFile,System.Xml.XmlNode,Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            This is called after each element has been through the matching process.
            If the element is matched then the xmlDabaconElement REF attribute will have been set to a valid database reference.
            If the element has not been matched then REF will have been removed or set to an empty string.
            </summary>
            <param name="srcfile">The current srcfile being imported</param>
            <param name="xmlDabaconElement">The Xml element that has just been through the match process</param>
            <param name="result">The import status for the srcfile import</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.IImportPlugin.PreUpdateProcessing(Aveva.Pdms.Database.Xml.ISrcFile,Aveva.Pdms.Database.Xml.DbDocument,Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            This method provides additional application specific pre-processing of the
            DbDocument document before the database is updated.
            This is called after the srcfile has been converted and the DbDocument
            document has been matched using NAME, DBREF, OWNER and OWNERREF attributes.
            The result of this method must be an DbDocument instance ready for database update
            or a result status of Error.
            This is performed inside the managed update transaction.
            </summary>
            <param name="srcfile">the srcfile being imported</param>
            <param name="result">The import status for the srcfile import</param>
            <param name="xmlDabacon">The DbDocument xml document</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.IImportPlugin.PostImportProcessing(Aveva.Pdms.Database.Xml.ISrcFile,Aveva.Pdms.Database.Xml.DbDocument,Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            This method provides additional application specific post-processing of the
            of th database after it has been updated for a given srcfile, before the
            next srcfile is imported.
            This is performed inside the managed update transaction.
            </summary>
            <param name="srcfile">The srcfile that has just been imported</param>
            <param name="xmlDabacon">The document imported</param>
            <param name="result">The import status for the srcfile import</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.IImportPlugin.PostImportProcessing(Aveva.Pdms.Database.Xml.SrcFileCollection,Aveva.Pdms.Database.Xml.ImportStatus@)">
            <summary>
            This is called after all processing is complete
            Any import tidy up tasks may be performed here
            This is performed outside of the update transactions
            </summary>
            <param name="srcfiles">The srcfile collection that was imported</param>
            <param name="result">The import status for the srcfile import</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.IImportPlugin.ImportCancelled">
            <summary>
            performs up any cleanup required for a cancelled import.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.IImportPlugin.ImportRolledBack">
            <summary>
            performs up any cleanup required for an aborted and rolledback import.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.IImportPlugin.ImportAborted">
            <summary>
            An import may be aborted prior to any file processing
            in this case this method will be called to perform any necessary cleanup, reporting.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.IImportPlugin.Name">
            <summary>
            Used to identify this plugin.
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.LOGRECORDTYPE">
            <summary>
            Record types used internally and by the XmlIOLoggerAlertArgs class.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.LOGRECORDTYPE.Message">
            <summary>
            Information messages logged
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.LOGRECORDTYPE.Warning">
            <summary>
            application warnings
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.LOGRECORDTYPE.Error">
            <summary>
            Errors that interrupt execution behaviour
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.LOGRECORDTYPE.Debug">
            <summary>
            Debug messages - not really used
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.LogHandler">
            <summary>
            The delegate required to subscrive to log events
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.ILogger">
            <summary>
            If a class implements this interface then it can register itself with the LogManager
            so that log events are directed to the centralised logs.
            </summary>
        </member>
        <member name="E:Aveva.Pdms.Database.Xml.ILogger.LogEvent">
            <summary>
            A log event to be sent to the log destinations
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.ImportStatus">
            <summary>
            status of an import
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.ImportStatus.Unprocessed">
            <summary>
            no attempt made to process the srcfile
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.ImportStatus.Processing">
            <summary>
            srcfile is being processed
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.ImportStatus.Success">
            <summary>
            srcfile was imported without any errors or warnings
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.ImportStatus.Warning">
            <summary>
            srcfile was imported but warnings were issued
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.ImportStatus.Error">
            <summary>
            srcfile failed to import due to errors
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.ImportStatus.Cancelled">
            <summary>
            srcfile import was canceled by the user
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.ImportStatus.RolledBack">
            <summary>
            srcfile import was rolledback
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.ImportStatus.Aborted">
            <summary>
            srcfile import was aborted
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.ImportProgress">
            <summary>
            enumeration detailing the progress during a srcfile import
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.ImportProgress.NotProcessing">
            <summary>
            Import not started
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.ImportProgress.Validating">
            <summary>
            original data is being validated
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.ImportProgress.Parsing">
            <summary>
            data is being parsed and converted to a db representation
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.ImportProgress.MatchingToDb">
            <summary>
            the db representation is being compared against the database contents
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.ImportProgress.UpdatingDb">
            <summary>
            the database is being updated
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.ImportProgress.PostProcessing">
            <summary>
            post processing tasks such as element naming, page matching, graphical conversion
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.ImportProgress.Paused">
            <summary>
            import paused
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.ImportHandler">
            <summary>
            USed for import events
            </summary>
            <param name="sender">the srcfile raising the event</param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.ISrcFile">
            <summary>
            Summary description for ISrcFile.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.ISrcFile.AddLogEvent(System.Object,Aveva.Pdms.Database.Xml.LogEventArgs)">
            <summary>
            Method to catch all log events between an import started and import completed event
            </summary>
            <param name="sender">this</param>
            <param name="args">The log events that ocurred during an import</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.ISrcFile.Validate">
            <summary>
            Performs complete validation of the source file.
            </summary>
            <returns>true if successsful, false if there were errors.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.ISrcFile.MinimiseResources">
            <summary>
            Frees up any memory usage that isn't required.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.ISrcFile.ToDbDocument(System.Collections.Hashtable,Aveva.Pdms.Database.Xml.DbDocument@)">
            <summary>
            converts this srcfile to a DbDocument
            </summary>
            <param name="conversionParameters">Any conversion parameters required</param>
            <param name="dbDocument">The document created</param>
            <returns>true if written ok, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.ISrcFile.MatchToDbs(Aveva.Pdms.Database.Xml.DbDocument@)">
            <summary>
            Runs the import up until the actual point of updating the databases.
            The document that would normally then be used ot update the databases is returned for use.
            </summary>
            <param name="dbDocument">The document created during the match.  This include REF attributes for all matched elements</param>
            <returns>true if the document was created ok, false if there was an error.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.ISrcFile.ImportToDbs">
            <summary>
            Imports this SrcFile into the database.
            Ideally all imports are managed through the use of SrcFileCollection.ImportToDbs()
            </summary>
        </member>
        <member name="E:Aveva.Pdms.Database.Xml.ISrcFile.ImportStarted">
            <summary>
            triggered when an import of this srcfile is started
            </summary>
        </member>
        <member name="E:Aveva.Pdms.Database.Xml.ISrcFile.ImportCompleted">
            <summary>
            triggered when an import of this srcfile is completed
            </summary>
        </member>
        <member name="E:Aveva.Pdms.Database.Xml.ISrcFile.ImportProgressChanged">
            <summary>
            triggered whenever the progress of an import is changed for this srcfile
            </summary>
        </member>
        <member name="E:Aveva.Pdms.Database.Xml.ISrcFile.ImportRolledBack">
            <summary>
            triggered if the import of this srcfile is rolledback
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.ISrcFile.Status">
            <summary>
            Gets and sets the status of this source file with respect to importing into the db.
            this is set at the point the import starts and completes
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.ISrcFile.Progress">
            <summary>
            enables a handler to track import progress for this srcfile.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.ISrcFile.ImportLog">
            <summary>
            Gets and the list of log events from an import
            this will be null if no import has taken place.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.ISrcFile.FullFilename">
            <summary>
            returns the full path of the file this instance is associated with.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.ISrcFile.ShortFilename">
            <summary>
            Gets the filename without path.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.ISrcFile.FileType">
            <summary>
            returns the name of the file type used by the system resources in choosing
            resouces associated with the file.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.ISrcFile.FileVersion">
            <summary>
            returns the file version of the filetype for this source file instance.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.ISrcFile.PartialElement">
            <summary>
            If set to true then attributes not in the file are left as found, otherwise they are set to their default values
            Nb the default is false.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.ISrcFile.PermittedPseudoAttributes">
            <summary>
            This is the pseudo attributes that are permitted in the data being imported.
            If not specified here they will be reported as a validation failure by the attribute validation.
            This returns null if no PseudoAttributes are to be included in the import
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.ISrcFile.ValidationErrorMessages">
            <summary>
            This is null if no validation has been performed.
            This will be an empty collection if validation was successful.
            This is a collection of LogEventArgs
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.ISrcFileFactory">
            <summary>
            Base type for SrcFileFactory classes.
            This enables SrcFiles to be constructed without
            explicit knowledge of each file type within the core classes.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.ISrcFileFactory.CreateSrcFile(System.String)">
            <summary>
            Creates a src file given a filename.
            </summary>
            <param name="filename">the full name of the file to create a SrcFile object from</param>
            <returns>A SrcFile object, or null if this factory cannot produce a Srcfile object for the file provided.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.ISrcFileFactory.CreateSrcFileWithMinimalResources(System.String)">
            <summary>
            Creates a src file given a filename.  This attempts to minimise the resource in use once the object has been created.
            For example once the initial instance is configured the file contents/references may be removed from memory to avoid using too many resources.
            </summary>
            <param name="filename">the full name of the file to create a SrcFile object from</param>
            <returns>A SrcFile object, or null if this factory cannot produce a Srcfile object for the file provided.</returns>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.LogEventArgs">
            <summary>
            Helper class for the XmlIOLogger class when log events are raised
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.LogEventArgs.#ctor(Aveva.Pdms.Database.Xml.LOGRECORDTYPE,System.String,System.String,System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="type">Error, Warning, Message, Debug</param>
            <param name="fullmsg">The formatted emssage string</param>
            <param name="resourceSet">The resource file the message is defined in</param>
            <param name="resourceKey">The resource key of the message</param>
            <param name="args">The arguments that the were used to make up the message</param>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.LogEventArgs.Type">
            <summary>
            The type of message i.e. Error, Warning, Message, Debug
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.LogEventArgs.Time">
            <summary>
            The time that this logEvent object was created
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.LogEventArgs.Message">
            <summary>
            The fully formatted message string
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.LogEventArgs.ResourceSet">
            <summary>
            The resource file the message is defined in.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.LogEventArgs.ResourceKey">
            <summary>
            The identity to the resource used to create the message
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.LogEventArgs.Args">
            <summary>
            Any arguments used to construct the full message text.
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.LogManager">
            <summary>
            Class to output log events to log destinations
            This allows multiple loggers to log through a single channel
            
            Notes :-
            	- the resource ID_XMLIO_PROP_LogFileRetention is used to determine the period files are kept for this can be set to 'keep' or 'n days' }
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.LogManager.m_instance">
            <summary>
            The instance of the log manager
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.LogManager.m_filename">
            <summary>
            The filename of the log being written
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.LogManager.m_logDirectory">
            <summary>
            The directory where the log file resides.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.LogManager.m_logToConsole">
            <summary>
            flag indicating whether log contents are being directed to the console
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.LogManager.m_loggers">
            <summary>
            The log instances registered with this manager
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.LogManager.m_writer">
            <summary>
            The file handle for log events
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.LogManager.m_lastError">
            <summary>
            The last error message logged
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.LogManager.m_lastWarning">
            <summary>
            The last warning message logged
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.LogManager.#ctor">
            <summary>
            private constructor
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.LogManager.SetLogDirectory">
            <summary>
            Sets the log directory, creates one if one doesn't exist
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.LogManager.SetLogFilename">
            <summary>
            Generates the filename for the log file
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.LogManager.WriteHeaders">
            <summary>
            Wrtie the headers to the log file
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.LogManager.ClearOldFiles">
            <summary>
            Clears the previous log files that are older than the specified retention period
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.LogManager.ClearFiles(System.Int32)">
            <summary>
            removes '.log' and '.tmp' files that are older than the retention period from the log directory.
            </summary>
            <param name="nofDays">The number of days to keep files for</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.LogManager.logger_LogEvent(System.Object,Aveva.Pdms.Database.Xml.LogEventArgs)">
            <summary>
            sends a log event to the log destinations
            </summary>
            <param name="sender">the sending logger class</param>
            <param name="e">The event being logged</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.LogManager.RegisterLogger(Aveva.Pdms.Database.Xml.ILogger)">
            <summary>
            Registers a logging class with this log manager
            </summary>
            <param name="logger"></param>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.LogManager.Instance">
            <summary>
            Provides access to an instance of the log manager
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.LogManager.LogFilename">
            <summary>
            The filename of the file being logged to if logging to file
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.LogManager.LogDirectory">
            <summary>
            The directory the log file is in
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.LogManager.LoggingToFile">
            <summary>
            Flag indicating whether log events are being logged to file.
            Nb this may be false if a File related error has occurred
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.LogManager.LoggingToConsole">
            <summary>
            Flag indicating whether or not output is being sent to the console.
            If set to true log events are sent to file and to the console
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.LogManager.LastError">
            <summary>
            The last error logged
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.LogManager.LastWarning">
            <summary>
            The last warning logged
            </summary>
        </member>
        <member name="E:Aveva.Pdms.Database.Xml.LogManager.LogEvent">
            <summary>
            called each time a message is logged
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.Resources">
            <summary>
            Class to help simplify resource access for XmlDabacon
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Resources.GetString(System.String)">
            <summary>
            Gets a string resource from the Aveva.Database.Xml resources
            </summary>
            <param name="resourceID">The identity of the resource to return</param>
            <returns>
            The string resource if present, otherwise the following message is returned :-
            No resource with the key 'resourceID'
            </returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Resources.GetStringFromResourceSet(System.String,System.String)">
            <summary>
            Gets a string resource from a given resource set
            </summary>
            <param name="resourceSet">The name of the resource set to get the string from</param>
            <param name="resourceID">The identity of the resource to return</param>
            <returns>
            The string resource if present, otherwise the following message is returned :-
            No resource with the key 'resourceID'
            </returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Resources.GetString(System.String,System.Object[])">
            <summary>
             Gets a string resource from the Aveva.Database.Xml resources and substitutes the given
             arguments into it
            </summary>
            <param name="resourceID">The identity of the resource to return</param>
            <param name="args">The arguments to substitute into it</param>
            <returns>
            The string resource if present, otherwise the following message is returned :-
            No resource with the key 'resourceSet+resourceID' {arg[1..n]}</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Resources.GetStringFromResourceSet(System.String,System.String,System.Object[])">
            <summary>
            Gets a string resource from a specified resource set and substitutes the given
             arguments into it
            </summary>
            <param name="resourceSet">The name of the resource set to get the resource from</param>
            <param name="resourceID">The identity of the resource to return</param>
            <param name="args">The arguments to substitute into it</param>
            <returns>
            The string resource if present, otherwise the following message is returned :-
            No resource with the key 'resourceSet+resourceID' {arg[1..n]}</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Resources.initResources">
            <summary>
            Checks the resource manager is initialised and the Aveva.Database.Xml resources are loaded.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.Resources.ResourceSet">
            <summary>
            Gets the name of the resource set used by Aveva.Database.Xml
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.Service">
            <summary>
            Service object.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Service.#ctor(System.String)">
            <summary>
            Service object constructor
            </summary>
            <param name="applicationName"></param>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.SrcFile">
            <summary>
            Abstract class defined to provide a common interface for files being imported, regardless of type.
            The methods and properties provided here are those required to undertake the import processes, once the SrcFile instances have been constructed.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.SrcFile.m_fileInfo">
            <summary>
            The full pathname of the source file on the file system.
            This must be set by the inheriting class if the source is file based.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.SrcFile.m_importStatus">
            <summary>
            The result of importing this file.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.SrcFile.m_importProgress">
            <summary>
            the progress of the srcfile through an import
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.SrcFile.m_importLog">
            <summary>
            The log events that occurred between ImportStarted and ImportCompleted
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.SrcFile.m_logHandler">
            <summary>
            Used to trap the log events for the import log.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFile.RaiseImportStarted(System.EventArgs)">
            <summary>
            Raises the ImportStarted event on behalf of an inheriting class.
            </summary>
            <param name="args">Event arguments relevant to this event</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFile.RaiseImportCompleted(System.EventArgs)">
            <summary>
            Raises the ImportCompleted event on behalf of an inheriting class.
            </summary>
            <param name="args">Event arguments relevant to this event</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFile.RaiseImportProgressChanged(System.EventArgs)">
            <summary>
            Raises the ImportStartedEvent on behalf of an inheriting class.
            </summary>
            <param name="args">Event arguments relevant to this event</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFile.RaiseImportRolledBack(System.EventArgs)">
            <summary>
            Raises the ImportStartedEvent on behalf of an inheriting class.
            </summary>
            <param name="args">Event arguments relevant to this event</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFile.AddLogEvent(System.Object,Aveva.Pdms.Database.Xml.LogEventArgs)">
            <summary>
            Method to catch all log events between an import started and import completed event
            </summary>
            <param name="sender">this</param>
            <param name="args">The log events that ocurred during an import</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFile.MatchToDbs(Aveva.Pdms.Database.Xml.DbDocument@)">
            <summary>
            Matches the import file to the database as per the load process and
            returns the matched document that would normally be used for the load.
            Nb this should be called on a SrcFile once it has been imported
            sinc the Status and Progress are reset by calling this method.
            </summary>
            <param name="dbDocument">The DbDocument that contains references to matched database elements.</param>
            <returns>false if the document can't be create or the match reports an error</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFile.ImportToDbs">
            <summary>
            Imports this SrcFile into the database.
            Ideally all imports are managed through the use of SrcFileCollection.ImportToDbs()
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFile.Validate">
            <summary>
            validation method to validate the source data prior to an import
            </summary>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFile.MinimiseResources">
            <summary>
            method to remove references to temporary resources so that the memory footprint can be minimised
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFile.ToDbDocument(System.Collections.Hashtable,Aveva.Pdms.Database.Xml.DbDocument@)">
            <summary>
            Conversion from the source data to a DbDocument that represents the db hierarchy.
            This shouldn't take into account the current db content, this is dealt with later.
            </summary>
            <param name="conversionParameters">Any parameters required for the conversion</param>
            <param name="dbDocument">The document created</param>
            <returns>true if successful, otherwise false.</returns>
        </member>
        <member name="E:Aveva.Pdms.Database.Xml.SrcFile.ImportStarted">
            <summary>
            event raised when this srcfile starts to be imported
            </summary>
        </member>
        <member name="E:Aveva.Pdms.Database.Xml.SrcFile.ImportCompleted">
            <summary>
            event raised when an import is completed
            </summary>
        </member>
        <member name="E:Aveva.Pdms.Database.Xml.SrcFile.ImportProgressChanged">
            <summary>
            event raised whenever the progress property changes
            </summary>
        </member>
        <member name="E:Aveva.Pdms.Database.Xml.SrcFile.ImportRolledBack">
            <summary>
            event raised if an import os rolledback
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFile.Status">
            <summary>
            Gets and sets the status of this source file with respect to importing into the db.
            this is set at the point the import starts and completes
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFile.Progress">
            <summary>
            enables a handler to track import progress for this srcfile.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFile.ImportLog">
            <summary>
            Gets and the list of log events from an import
            this will be null if no import has taken place.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFile.FullFilename">
            <summary>
            returns the full path of the file this instance is associated with.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFile.ShortFilename">
            <summary>
            Gets the filename without path.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFile.FileType">
            <summary>
            A string identifying the filetype of the source file
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFile.FileVersion">
            <summary>
            A string identifying the version information of the source data format
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFile.PartialElement">
            <summary>
            A flag to indicate whether or not to defult all attribtues not provided.
            if true then only the attribtues provided are updated.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFile.PermittedPseudoAttributes">
            <summary>
            This is the pseudo attributes that are permitted in the data being imported.
            If not specified here they will be reported as a validation failure by the attribute validation.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFile.ValidationErrorMessages">
            <summary>
            Any messages resulting from validation of the source data.
            Nb. This should only contain error messages, this will halt an import.
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.SrcFileCollection">
            <summary>
            This represents a set of source files that is to be used for an import.
            This collection provides all of the method necessary to import the soruce files into
            the database once the source file instances have been constructed.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFileCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFileCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            copies an array of srcfiles into this collection
            </summary>
            <param name="array">The colleciton of srcfiles to add to this collection</param>
            <param name="index">The index to insert them from</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFileCollection.GetEnumerator">
            <summary>
            The enumerator for this collection
            </summary>
            <returns>The enumerator for the srcfiles</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFileCollection.Add(Aveva.Pdms.Database.Xml.ISrcFile)">
            <summary>
            Adds the given source file to the collection only if it isnot already in the
            collection and doesn't have the same file.Filename property as any other srcfile.
            </summary>
            <param name="file">the Srcfile to add to the collection.</param>
            <returns>-1 if the file is already n the collection otherwise the index of the added srcfile.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFileCollection.Remove(Aveva.Pdms.Database.Xml.ISrcFile)">
            <summary>
            Removes an instance of a SrcFile from this collection.
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFileCollection.Contains(Aveva.Pdms.Database.Xml.ISrcFile)">
            <summary>
            returns true if the SrcFile istance is contained or if a SrcFile in the collection
            has a matching filename property
            </summary>
            <param name="file"></param>
            <returns>true if the instance is contained or a SrcFile has a matching Filename property, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFileCollection.Clear">
            <summary>
            Empties this collection
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFileCollection.IndexOf(Aveva.Pdms.Database.Xml.ISrcFile)">
            <summary>
            Gets the index of a Srcfile instance within this collection
            </summary>
            <param name="srcfile">the SrcFile to look for.</param>
            <returns>-1 if not in the collection or the index of the given SrcFile.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFileCollection.Append(Aveva.Pdms.Database.Xml.SrcFileCollection)">
            <summary>
            Appends a srcfile collection to this one.
            If a srcfile in the given collection represents the same file
            as one already in the collection then it isn't added.
            </summary>
            <param name="srcFiles"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFileCollection.GetSrcFile(System.String)">
            <summary>
            Tries to return the SrcFile where the filename is the same
            as the element passed in.
            </summary>
            <param name="filename">The filename to match to the src files.</param>
            <returns>A SrcFile instance or null</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFileCollection.Validate">
            <summary>
            Validates all of the members of this collection
            and moves any failures from this collection to a collection which is returned
            </summary>
            <returns>
            A collection of validation failures.
            This will be empty if all files pass validation.
            </returns>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.SrcFileCollection.m_importStatus">
            <summary>
            The result of importing this src file collection.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFileCollection.CancelImport(System.Boolean)">
            <summary>
             call this to inturrupt the import process and cancel an import
            </summary>
            <param name="rollback">If true all tasks are rolledback, otherwise successful tasks remain</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFileCollection.ImportToDBs">
            <summary>
            Imports the src files into the database.
            To cancel the import after calling this use the CancelImport method
            </summary>
            <returns>Overall status of the import, each srcfile also has its own status set</returns>
        </member>
        <member name="E:Aveva.Pdms.Database.Xml.SrcFileCollection.ImportStarted">
            <summary>
            Indicates an import has been started in this collection
            </summary>
        </member>
        <member name="E:Aveva.Pdms.Database.Xml.SrcFileCollection.ImportCompleted">
            <summary>
            Inidicates an import of this collection has completed
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFileCollection.Count">
            <summary>
            A count of the number of srcfiles in the collection
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFileCollection.IsEmpty">
            <summary>
            true if there are no items in the collection
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFileCollection.IsSynchronized">
            <summary>
            see ICollection
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFileCollection.SyncRoot">
            <summary>
            See ICollection
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFileCollection.Item(System.Int32)">
            <summary>
            Permits indexed access to this collection
            May throw an exception if there is an attempt to set or get a value to an index &lt; 0 or &gt; Count
            </summary>
            <param name="index">The index to access/set</param>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFileCollection.Status">
            <summary>
            Gets and sets the status of this source file collection with respect to importing into the db.
            this is set at the point the import starts and completes
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFileCollection.CancelRequested">
            <summary>
            Indicates the user has requested that the current import is cancelled
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFileCollection.RollbackRequested">
            <summary>
            inidicates that the user has requested the current import to be rolled back
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.SrcFileCollection.ImportHandler">
            <summary>
            delegate for import events
            </summary>
            <param name="sender">The srcfile collection involvedin the event</param>
            <param name="e">event args</param>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.SrcFileFactoryManager">
             <summary>
             The source file factory manager creates SrcFile instances using the
             set of registered factories.
            
             This enables different filetypes to be added without all of the file
             logic being maintained in a single place.
             </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.SrcFileFactoryManager.m_factories">
            <summary>
            The registered set of factories
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.SrcFileFactoryManager.m_instance">
            <summary>
            The singleton instance
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFileFactoryManager.#ctor">
            <summary>
            Hidden constructor to ensure only a single instance is instantiated.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFileFactoryManager.Add(Aveva.Pdms.Database.Xml.ISrcFileFactory)">
            <summary>
            Registers a SrcFileFactory with this SrcFileFactoryManager
            </summary>
            <param name="factory">The factory to register</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFileFactoryManager.CreateSrcFiles(System.String[],System.Collections.ArrayList)">
            <summary>
            Creates a collection of SrcFile instances given an array of filenames.
            </summary>
            <param name="filenames">An array of filenames to create source files from.</param>
            <param name="badFiles">A collection to add filenames to when a SrcFile cannot be created</param>
            <returns>
            A collection of the source files created.  If any filenames cannot be turned into SrcFile
            instances then the size of the collection won't match the number of filenames provided.
            </returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFileFactoryManager.CreateSrcFilesWithMinimalResources(System.String[],System.Collections.ArrayList)">
            <summary>
            Creates a collection of SrcFile instances given an array of filenames.
            Thi sattempts to minimise the memory footprint of the collection
            </summary>
            <param name="filenames">An array of filenames to create source files from.</param>
            <param name="badFiles">A collection to add filenames to when a SrcFile cannot be created</param>
            <returns>
            A collection of the source files created.  If any filenames cannot be turned into SrcFile
            instances then the size of the collection won't match the number of filenames provided.
            </returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.SrcFileFactoryManager.CreateSrcFiles(System.String[],System.Collections.ArrayList,System.Boolean)">
            <summary>
            Creates a collection of SrcFile instances given an array of filenames.
            </summary>
            <param name="filenames">An array of filenames to create source files from.</param>
            <param name="badFiles">A collection to add filenames to when a SrcFile cannot be created</param>
            <param name="minimiseResources">Set to true if the memory footprint should be minimised</param>
            <returns>
            A collection of the source files created.  If any filenames cannot be turned into SrcFile
            instances then the size of the collection won't match the number of filenames provided.
            </returns>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.SrcFileFactoryManager.Instance">
            <summary>
            The single instance of the Manager
            </summary>
            <returns>The single instance</returns>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.StreamResolver">
            <summary>
            This class is used by the Transform class to resolve document references
            in stylesheets to in memory streams.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.StreamResolver.m_streams">
            <summary>
            A collection of streams that this can be resolved to.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.StreamResolver.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.StreamResolver.AddStream(System.String,System.IO.Stream)">
            <summary>
            Once a stream has be resolved once it is deregistered as they are disposed of by the XSL processor in 2003.
            </summary>
            <param name="uri"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.StreamResolver.AddDocument(System.String,System.Xml.XmlDocument)">
            <summary>
            Once registered a document will be resolved to until it is superceded or removed.
            </summary>
            <param name="uri"></param>
            <param name="doc"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.StreamResolver.Remove(System.String)">
            <summary>
            Removes a reolve target identified by its uri
            </summary>
            <param name="uri">the uri of the resolve target to remove from this resolver</param>
            <returns>true if removed successfully, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.StreamResolver.GetEntity(System.Uri,System.String,System.Type)">
            <summary>
            Gets a resolve target given a uri
            </summary>
            <param name="absoluteUri">the uri to resolve</param>
            <param name="role">the role context</param>
            <param name="ofObjectToReturn">the type of object expected</param>
            <returns>the resolved object or null</returns>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.Transform">
            <summary>
            This abstract class provides static methods for the transformation of XML files using XSL.
            Specific Schematic Model Manager tranformations as well as generic capabilities are provided.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.Transform.m_fileType">
            <summary>
            ResourceType parameters passed to Aveva.Database.Xml.ChooseResource.xsl or any
            choose resource substitution files.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Transform.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.Transform.m_uriResolver">
            <summary>
            The URI resolver to enable stream to be used as input in transformations
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Transform.FileTypeKnown(System.Xml.XmlDocument)">
            <summary>
            Determines whether or not the given document is supported in the ChooseResource file associated with this
            Transform
            </summary>
            <param name="doc">The XML document to test</param>
            <returns>true if the file type is known, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Transform.ToFileTypeName(System.Xml.XmlDocument)">
            <summary>
            Uses the ChooseResource xsl file to determine the file type name of the
            XML document provided.
            Logs an Error message if the file type is not supported
            </summary>
            <param name="doc">The XML document to get the file type for.</param>
            <returns>The name of the file type or the file type error message as specified by the resource ID_XMLIO_ERR_FileTypeNotRecognised</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Transform.ToFileVersion(System.Xml.XmlDocument)">
            <summary>
            Uses the ChooseResource xsl file to determine the file version of the XMLDocument provided
            XML document provided.
            Logs an Error message if the file type is not supported
            </summary>
            <param name="doc">The XML document to get the file version for.</param>
            <returns>The version identifier for the filetype or the file type error message as specified by the resource ID_XMLIO_ERR_FileTypeNotRecognised</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Transform.FileTypes">
            <summary>
            Returns the FileTypes that are currently mapped to resource files.
            </summary>
            <returns>a Collection of file type names.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Transform.FileVersionsForFileType(System.String)">
            <summary>
            returns the list of file versions that have resources mapped in ChooseResources.xsl for
            the given fileTypeName
            </summary>
            <param name="fileTypeName">The file type to get the list of versions for</param>
            <returns>A collection of version strings, or an empty collection.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Transform.ToPartialElement(System.Xml.XmlDocument)">
            <summary>
            Get whether or not the file contains full element definitions or partial elements.
            If partial elements is true then the attribtues not in the import file are not cleared during import
            </summary>
            <param name="doc">The document to get the config for</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Transform.ToSchemaResources(System.Xml.XmlDocument)">
            <summary>
            gets the full pathname of the schema file(s) to use for validation, when validating
            the given document. The schema filenames are a ',' separated list.
            </summary>
            <param name="doc">The document to get the schema for</param>
            <returns>the full pathname of the schema file or an empty string if no schema is mapped for the document.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Transform.ValidationReportAvailable(System.Xml.XmlDocument)">
            <summary>
            Determines whether or not a validation stylsheet is mapped fo rthe given document
            </summary>
            <param name="doc">The document to check</param>
            <returns>true if a validation stylsdheet is mapped otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Transform.ToValidationReport(System.Xml.XmlDocument,System.IO.Stream)">
            <summary>
            Determines which XSL validation resource to use for the given document
            and applies it to the document provided.
            This will return false if no validationXSL is mapped.
            </summary>
            <param name="doc">The document to create a validation report for.</param>
            <param name="output">The stream to write the validation report to</param>
            <returns>true if the report was generated without error, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Transform.ToDbDocument(System.Xml.XmlDocument,System.Collections.Hashtable,Aveva.Pdms.Database.Xml.DbDocument@)">
            <summary>
            Converts the given document to an XmlDabacon DbDocument
            </summary>
            <param name="doc">the XmlDocument to convert</param>
            <param name="conversionParameters">The conversion parameters to pass to the conversion xsl</param>
            <param name="dbDocument">The result of the conversion</param>
            <returns>true if the transformation was executed successfully, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Transform.Copy(System.Xml.XmlDocument,System.IO.Stream)">
             <summary>
             Creates a copy of a document represented by an XPathNavigator
             and writes it to a stream.
            
             This is particularly useful for converting database contents to an
             XML representation using the DbDocumentNavigator class.
             </summary>
             <param name="doc">An XPathNavigable document instance</param>
             <param name="output">The stream to write the copy to.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Transform.ApplyTransform(System.Xml.XmlDocument,System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
            <summary>
            Applies a XSL transform to an XPathNavigator with the given arguments
            If possible a cached transformation is used.
            </summary>
            <param name="doc">The XPathNavigator to apply the transformation to</param>
            <param name="transform">The full filename of the trasnformation to apply</param>
            <param name="xslArg">The parameters to be passed to the XSL</param>
            <param name="output">The stream to write the result to.</param>
            <returns>true if the trasnformation was successfully loaded and applied, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Transform.ResourcesArgs(System.String,System.String)">
            <summary>
            Gets the arguments required for the stylesheet used to choose resources.
            </summary>
            <param name="resourceType">The resourceType to place in the argument list</param>
            <param name="resourcePath">the folder location for any resources for the transform results</param>
            <returns>the Argument lise required for the choose resource XSL transformation.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Transform.ResourceName(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Applies the choose resources XSL file to the XPathNavigator to
            get the name of a resource file for the given navigator and resourceType.
            </summary>
            <param name="doc">The document to get the resource for</param>
            <param name="resourceType">The resource to get</param>
            <param name="resourcePath">The file path to the resources files</param>
            <returns>the full pathname of the Resource or String.Empty if the resource can't be mapped</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Transform.ResourceName(System.Xml.XmlDocument,System.String,System.String,System.Boolean)">
            <summary>
            Applies the choose resources XSL file to the XPathNavigator to
            get the name of a resource file for the given navigator and resourceType.
            </summary>
            <param name="doc">The document to get the resource for</param>
            <param name="resourceType">The resource to get</param>
            <param name="resourcePath">The file path to the resources files</param>
            <param name="logError">true if errors are to be logged, otherwise false</param>
            <returns>the full pathname of the Resource or String.Empty if the resource can't be mapped</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.Transform.ApplyResource(System.Xml.XmlDocument,System.IO.Stream,System.String,System.String,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Applies the resource identified in the choose resources XSL to the given document with the given arguments
            </summary>
            <param name="doc">The document to apply the transformation to.</param>
            <param name="output">The output stream to write the transformation result to</param>
            <param name="resourceType">The name of the resourceType to apply.</param>
            <param name="resourcePath">The location of application resources.</param>
            <param name="args">the arguments required for the transformation</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.Transform.URIResolver">
            <summary>
            Provides access to the URI resolver used in any transformations
            By using the add method a calling application may provide a means of
            an XSL transformation accessing an in memory XML stream to use in a transformation
            By replacing this resolver a single resolver can be shared by many SrcFiles during a collection import
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.Transform.ResourcesDirectory">
            <summary>
            The resources directory used for resources identified in choose resource.
            if a plugin requires resources in a different location this can be set or overridden
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.Transform.ResourcesXSLFilename">
            <summary>
            Gets the filename of the stylesheet used to choose resources
            This is a combination of resources from the resources file.
            </summary>
            <returns>The full pathname of the stylesheet used to choose resources.</returns>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.Transform.ChooseResourceFileExists">
            <summary>
            flag indicating whether or not the required resource file exists
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.UIManager">
            <summary>
            Class to manage UI components/initialisation etc for the Aveva.Database.xml project
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.UIManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.UIManager.CreateWindows">
            <summary>
            Creates any Aveva.Pdms.Database.Xml docked windows
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.UIManager.RegisterCommands">
            <summary>
            Registers the Xml Addin commands
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.UIManager.ExecuteImportFileCommand">
            <summary>
            Runs an Xml Export for a single file
            Output goes to command line
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.UIManager.Instance">
            <summary>
            Marshalls access to a single instance of the UIManager class.
            </summary>
            <returns>The singleton instance of the UIManager class</returns>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.XmlImportCommand">
            <summary>
            Summary description for XmlImportCommand.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlImportCommand.#ctor">
            <summary>
            Dafault Constructor
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlImportCommand.Execute">
            <summary>
            Executes the command
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.XmlImportDialog">
            <summary>
            TODO : genericise the ImportProgressDialog from SMM.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.XmlImportDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlImportDialog.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlImportDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlImportDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlImportDialog.OnLoad(System.EventArgs)">
            <summary>
            handles the onload so that the form behaves correctly
            </summary>
            <param name="e">event args</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlImportDialog.RunImport(System.Object,System.EventArgs)">
            <summary>
            runs the import associated with this dialog
            </summary>
            <param name="source"></param>
            <param name="e"></param>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlImportDialog.SrcFileCollection">
            <summary>
            The SrcFileCollection associated with this dialog
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.XmlIOLogger">
             <summary>
             XmlIOLogger class for XmlDabacon.
            
             This class raises log events that can be utilised by the calling application
             </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.XmlIOLogger.m_instance">
            <summary>
            singleton instance.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.LogMessage(System.String)">
            <summary>
            Raises a log event for an information message
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources file.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.LogMessage(System.String,System.Object[])">
            <summary>
            Raises a log event for an information message
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources file.</param>
            <param name="args">Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.LogMessage(System.String,System.String)">
            <summary>
            Raises a log event for an information message
            </summary>
            <param name="resourceKey">The identity of the message within the given resource set</param>
            <param name="resourceSet">The name of the resource set to get the message from</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.LogMessage(System.String,System.String,System.Object[])">
            <summary>
            Raises a log event for an information message
            </summary>
            <param name="resourceKey">The identity of the message within the given resource set</param>
            <param name="resourceSet">The name of the resource set to get the message from</param>
            <param name="args">Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.LogWarning(System.String)">
            <summary>
            Raises a log event for a warning message
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources file.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.LogWarning(System.String,System.Object[])">
            <summary>
            Raises a log event for a warning message
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources file.</param>
            <param name="args">Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.LogWarning(System.String,System.String)">
            <summary>
            Raises a log event for a warning message
            </summary>
            <param name="resourceKey">The identity of the message within the given resource set</param>
            <param name="resourceSet">The name of the resource set to get the message from</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.LogWarning(System.String,System.String,System.Object[])">
            <summary>
            Raises a log event for a warning message
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources file.</param>
            <param name="resourceSet">The name of the resource set to get the message from</param>
            <param name="args">Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.LogError(System.String)">
            <summary>
            Raises a log event for an error message
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources file.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.LogError(System.String,System.Object[])">
            <summary>
            Raises a log event for an error message
            </summary>
            <param name="resourceKey">The identity of the message within the Aveva.Database.Xml resources file.</param>
            <param name="args">Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.LogError(System.String,System.String)">
            <summary>
            Raises a log event for an error message
            </summary>
            <param name="resourceKey">The identity of the message within the given resource set</param>
            <param name="resourceSet">The name of the resource set to get the message from</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.LogError(System.String,System.String,System.Object[])">
            <summary>
            Raises a log event for an error message
            </summary>
            <param name="resourceKey">The identity of the message within the given resource set</param>
            <param name="resourceSet">The name of the resource set to get the message from</param>
            <param name="args">Any arguments required by the resource string.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.ValidationCallback(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            A helper method for XMLSchemaValidation.
            This logs all validation errors to the log.
            </summary>
            <param name="sender">null for some reason</param>
            <param name="args">The event arguments</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.ResetValidationErrorCount">
            <summary>
            resets the validation error count to 0.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.LogResourceString(Aveva.Pdms.Database.Xml.LOGRECORDTYPE,System.String,System.String,System.Object[])">
            <summary>
            Logs any type of message to the open destination
            </summary>
            <param name="type">The message type</param>
            <param name="resourceSet">The name of the resource set that contains the message</param>
            <param name="resourceKey">The identity of the resource used for the message</param>
            <param name="args">Any message arguments required by the resource</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.LogResourceString(Aveva.Pdms.Database.Xml.LOGRECORDTYPE,System.String,System.String)">
            <summary>
            Logs any type of message to the open destination
            </summary>
            <param name="type">the message type</param>
            <param name="resourceSet">The name of the resource set that contains the message</param>
            <param name="resourceKey">The identity of the resource used for the message</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.RaiseEvent(Aveva.Pdms.Database.Xml.LOGRECORDTYPE,System.String,System.String,System.String,System.Object[])">
            <summary>
            Writes a message of a given type to the open destination.
            This outputs information frmo the call stack and therefore expects 2 XmlIOLogger methods in the call
            stack prior to the call to this method.
            </summary>
            <param name="type">The type of the message being output</param>
            <param name="message">The fully formatted message</param>
            <param name="resourceKey">The resource identity of the message</param>
            <param name="resourceSet">The resource file the message is defined in </param>
            <param name="args">The arguments used in formatting the message</param>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.XmlIOLogger.m_nofErrorsToLog">
            <summary>
            The maximum number of errors messages to log.
            This is to stop the log being swamped.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIOLogger.NofValidationErrorsToLog">
            <summary>
            The maximum number of messages to log from the resource file.
            </summary>
            <returns>5 if the resource doesn't exist or the value from the resources file.</returns>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlIOLogger.Instance">
            <summary>
            Access to the singleton instance.
            This provides access to the logEvent event only
            </summary>
        </member>
        <member name="E:Aveva.Pdms.Database.Xml.XmlIOLogger.LogEvent">
            <summary>
            Raised for every event logged
            </summary>
        </member>
        <member name="E:Aveva.Pdms.Database.Xml.XmlIOLogger.LogErrorEvent">
            <summary>
            A low level alert to be brought to the users attention
            </summary>
        </member>
        <member name="E:Aveva.Pdms.Database.Xml.XmlIOLogger.LogErrorOrWarningEvent">
            <summary>
            A low level alert to be brought to the users attention
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlIOLogger.ValidationErrorCount">
            <summary>
            The number of validation callback errors raised since the count
            was last reset.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlIOLogger.LastError">
            <summary>
            The last error reported by the logger
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlIOLogger.LastErrorOrWarning">
            <summary>
            The last error or warning reported by the logger
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.XmlIONet">
            <summary>
            PML Callable wrapper for Schematic Model Manager Core functionality
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.ChooseSingleFile(System.String)">
            <summary>
            Opens the OpenFileDialog with .xsl filter in single file choose mode.
            </summary>
            <returns>the filename chosen or an empty string</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.LoadXSL(System.String)">
            <summary>
            Loads the stylesheet requested into this instance for use by the Transform methods.
            </summary>
            <param name="xslFilename">the filename of the stylesheet to load</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.Assign(Aveva.Pdms.Database.Xml.XmlIONet)">
            <summary>
            Default method
            </summary>
            <param name="that"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.RaiseResponse(System.Collections.ArrayList)">
            <summary>
            Passes information back to PML via events.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.ShowLimitedPseudoAttributes(System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            Sets the pseudo attributes to be shown as a restricted list based on the element type being output
            </summary>
            <param name="etype2pseudoAtts">The pseudo attributes to output for each element type</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.ShowLimitedPseudoAttributes(System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            Sets the pseudo attributes to be shown as a restricted list based on the element type being output
            </summary>
            <param name="etypes">A PML array of element types eg. e[1]='SCEQUI' e[2]='SCNOZZ'</param>
            <param name="attributes">A PML array of space separated attribute lists e.g. a[1]='DBTY SEQU' a[2]='DBTY SEQU'</param> 
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.Select(System.String)">
            <summary>
            executes a given XPath expression against the current element to select a single dbelement
            </summary>
            <param name="expr">The XPath expression to execute</param>
            <returns>string.Empty or the ref of the DbElement selected.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.Select(System.String,System.String)">
            <summary>
            executes a given XPath expression against a given element to select a single dbelement
            </summary>
            <param name="dbref">The ref of the element to execute the expression against</param>
            <param name="expr">The XPath expression to execute</param>
            <returns>string.Empty or the ref of the selected DbElement</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.TransformCE(System.String)">
            <summary>
            To transform the current element using the loaded stylesheet and write the output to a given file.
            </summary>
            <param name="outputfilename">The name of the file to create</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.TransformCE(System.String,System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            To transform the current element using the loaded stylesheet and write the output to a given file.
            </summary>
            <param name="outputfilename">The name of the file to create</param>
            <param name="argNames">The names of the stylesheet arguments</param>
            <param name="argValues">The values for the named arguments</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.TransformMDB(System.String)">
            <summary>
            To transform the mdb using the loaded stylesheet and write the output to a given file.
            </summary>
            <param name="outputfilename">The name of the file to create</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.TransformMDB(System.String,System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            To transform the current element using the loaded stylesheet and write the output to a given file.
            </summary>
            <param name="outputfilename">The name of the file to create</param>
            <param name="argNames">The names of the stylesheet arguments</param>
            <param name="argValues">The values for the named arguments</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.CreateXSDForMDB(System.String)">
            <summary>
            Creates an XSD file for the open MDB
            </summary>
            <param name="schemaFilename">The filename of the schema to create</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.CreateXSDForDB(System.String)">
            <summary>
            Creates an XSD file for the open MDB
            </summary>
            <param name="schemaFilename">The filename of the schema to create</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.CreateXSDForCE(System.String)">
            <summary>
            Creates an XSD file for the current element.
            </summary>
            <param name="schemaFilename">the filename of the schema to create</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.CreateXSDForDataSet(System.String,System.Collections.Hashtable)">
            <summary>
            Creates an XSD file for the current element.
            </summary>
            <param name="schemaFilename">the filename of the schema to create</param>
            <param name="elementTypes">the element types to support in the dataset schema</param>
            <returns>true if successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.Open(System.String)">
            <summary>
            This opens a given file using the system default application for the filetype
            </summary>
            <param name="filename">The name of the file to open</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.ParseArgs(System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            parses the given hashtables into an argument list
            </summary>
            <param name="argNames"></param>
            <param name="argValues"></param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.ImportFile(System.String)">
            <summary>
            To import a xml file
            </summary>
            <param name="fileName">Xml File Name</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlIONet.LogEventToConsole(System.Object,Aveva.Pdms.Database.Xml.LogEventArgs)">
            <summary>
            Writes a given log event to the pml window
            </summary>
            <param name="sender">the object raising the log event</param>
            <param name="eventargs">the log event arguments</param>
        </member>
        <member name="E:Aveva.Pdms.Database.Xml.XmlIONet.Response">
            <summary>
            Event to handle the callbacks
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlIONet.ShowPseudoAttributes">
            <summary>
            If set to true then the pseudo attributes are available in the database document
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlIONet.ExpandSecondaryHierarchy">
            <summary>
            If set to true then 1 level of secondary hierarchies is expanded during iteration
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlIONet.ReferencesAsNames">
            <summary>
            If set to true then Reference attributes are output as NAMEs instead of REFs
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlIONet.ResolvableNames">
            <summary>
            If set to true then Reference attributes are output as resolvable values even if unnamed.
            ie. a reference to an unnamed item will be output using the REF
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlIONet.ShowDisplayAttributes">
            <summary>
            If set to true then Reference attributes are output as NAMEs instead of REFs
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.XmlNamespaces">
            <summary>
            Summary description for XMLNamespaces.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.msdata">
            <summary>
            This is the MSDATA namespace, declared here for easy access, required by the navigator classes.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.msdataPrefix">
            <summary>
            This is the default namespace prefix for the MSDATA namespace.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.xml">
            <summary>
            This is the XML namespace, declared here for easy access, required by the navigator classes.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.xmlPrefix">
            <summary>
            This is the default namespace prefix for the XML namespace.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.xmlns">
            <summary>
            Used when declaring namespaces
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.xmlnsPrefix">
            <summary>
            This is the default namespace prefix for the XMLNS namespace.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.xsi">
            <summary>
            This is the XML Schema instance namespace, declared here for easy access, required by the navigator classes.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.xsiPrefix">
            <summary>
            This is the default namespace prefix for the xsi namespace.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.xs">
            <summary>
            This is the namespace for XML schema (XSD) files.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.xsPrefix">
            <summary>
            This is the default namespace prefix for auto generated XML schema (XSD) files.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.xsl">
            <summary>
            This is the namespace for XSL files.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.xslPrefix">
            <summary>
            This is the default namespace prefix for auto generated XML schema (XSD) files.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.dbdocument">
            <summary>
            This is the namespace for XMLDabacon document files
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.dbdocumentPrefix">
            <summary>
            The default namespace prefix for XMLDabacon document files
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.dbdataset">
            <summary>
            This is the namespace for XMLDabacon dataset files
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.dbdatasetPrefix">
            <summary>
            The default namespace prefix for XMLDabacon dataset files
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.uda">
            <summary>
            Used by XMLDabacon as the namespace for UDA attributes.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.udaPrefix">
            <summary>
            The default namespace prefix used for UDA Attributes within XMLDabacon
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.udet">
            <summary>
            Used by XMLDabacon as the namespace for UDET element types
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.udetPrefix">
            <summary>
            The default namespace prefix used for UDET element types within XMLDabacon
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.avex">
            <summary>
            The namespace for the aveva extension functions
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlNamespaces.avexPrefix">
            <summary>
            The default namespace prefix used for DbDocument extension functions
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.XmlSrcFile">
            <summary>
            Summary description for XmlSrcFile.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.XmlSrcFile.m_transform">
            <summary>
            transform class used to interpret and manipulate the source file.
            by using different transform classes for different filetypes
            applications can interpret and manipulate a variety of formats.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.XmlSrcFile.m_xml">
            <summary>
            The XML document if loaded associated with this instance
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.XmlSrcFile.m_lastWriteTimeUtc">
            <summary>
            The write time of the XML document when last loaded.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.XmlSrcFile.m_fileType">
            <summary>
            The textual name of the file type being managed.
            String.Empty means this is unknown or not assessed
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.XmlSrcFile.m_fileVersion">
            <summary>
            The version of the file format.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.XmlSrcFile.m_partialElement">
            <summary>
            flag to indicate whether the import is to update partial or complete updates.
            This value is set from the config
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.XmlSrcFile.m_partialElementApp">
            <summary>
            flag to indicate whether the import is to update partial or complete updates.
            This value is set by the calling application
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.XmlSrcFile.m_isValid">
            <summary>
            indicates the file is valid according to it schema and XSLT validation
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.XmlSrcFile.m_validated">
            <summary>
            Indicates whether or not the current document has been validated.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.XmlSrcFile.m_validationMessages">
            <summary>
            Any messages created as a result of validation
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.XmlSrcFile.m_extraPseudos">
            <summary>
            Pseudo attributes to include in core validation
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.#ctor(System.String)">
            <summary>
            Constructs an XmlSrcFile object given a filename for the file that
            the instance is to be associated with.
            This loads and validates the file.
            The ChooseResource stylesheet used is the default installation one.
            </summary>
            <param name="filename">The name of the file to use as the source of this SrcFile</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.#ctor(System.String,Aveva.Pdms.Database.Xml.Transform)">
            <summary>
            Constructs an XmlSrcFile object given a filename for the file that
            the instance is to be associated with.
            This loads and validates the file.
            The ChooseResource stylesheet used can be changed by passing a transform instance that works from a non-standard location.
            Passing a null transform will default to the default installation one.
            </summary>
            <param name="filename">The name of the file to use as the source of this SrcFile</param>
            <param name="transform">The class responsible for converting the SrcFile to the required outputs or answering quesries about its content</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructs an XmlSrcFile object given an in memory XmlDocument.
            </summary>
            <param name="doc">The document to treat as a src file.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.#ctor(System.Xml.XmlDocument,Aveva.Pdms.Database.Xml.Transform)">
            <summary>
            Constructs an XmlSrcFile object given an in memory XmlDocument and transform instance.
            </summary>
            <param name="doc">The document to treat as a src file.</param>
            <param name="transform">The class responsible for transform the doc and answering questions about its content, if null a default Transform class is used.</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.System#IDisposable#Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.SetPartialElement(System.Boolean)">
            <summary>
            overrides the PartialElement configuration so that only bits of elements are imported.
            </summary>
            <param name="partialElement"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.AddPseudosToCoreValidation(System.Collections.Generic.Dictionary{Aveva.Pdms.Database.DbElementType,System.Collections.Generic.List{Aveva.Pdms.Database.DbAttribute}})">
            <summary>
            Adds pseudo attributes to the standard validation so that data with non-system/uda attributes
            can be imported via accept/reject
            </summary>
            <param name="pseudos">The pseudo attributes to allow in the source data</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.Validate">
            <summary>
            Validates the file associated with this instance.
            This performs schema validation and XSL based validation of the source file.
            Any messages that result from the validation are subsequently available using the ValidationMessages property
            </summary>
            <returns>true if validated ok, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.Validate(System.Xml.XmlDocument)">
            <summary>
            Validates the given document assuming the document is this document for this XmlSrcFile.
            </summary>
            <param name="doc">The XmlDocument to validate</param>
            <returns></returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.AddMessage(System.Object,Aveva.Pdms.Database.Xml.LogEventArgs)">
            <summary>
            Adds a log event to the validation messages managed by this instance.
            </summary>
            <param name="sender">null</param>
            <param name="args">The log entry</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.AddXslValidationErrors(System.IO.Stream)">
            <summary>
            Takes a stream of messages output from the validation using XSL
            and converts each line into an Error event.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.GetSchemasForDocument(System.Xml.XmlDocument)">
            <summary>
            Uses choose resource to obtain a schema set for the given document
            The ValidationHelper must have already had the Srcfile registered with it.
            If no schema is specified for the filetype in ChooseResource.xsl then this will attempt to use a schema referenced by document.
            If no schema can be determined this will return false.
            </summary>
            <param name="doc">Document for which the shema set is to be obtained</param>
            <returns>Resultant schema set or null if none could be obtained</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.ValidateWithXSL(System.Xml.XmlDocument)">
            <summary>
            Undertakes supplementary validation using an XSL resource file
            if one is mapped to the file type for this src file.
            </summary>
            <returns>true if validation was successful, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.ToDbDocument(System.Collections.Hashtable,Aveva.Pdms.Database.Xml.DbDocument@)">
            <summary>
            Write the contents of the srcfile to the given Stream as an XMLDabacon document.
            This method is used by the XMLDabaconDbDocument constructor.
            </summary>
            <param name="conversionParameters">parameters passed to the conversion</param>
            <param name="dbDocument">The document created</param>
            <returns>true if written ok, otherwise false.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.CheckFile">
            <summary>
            Checks the document information stored in this object is up to date.
            If not the document is loaded and the document information updated.
            If the file has been changed on disk since it was last assessed the information is reloaded.
            The information is not reloaded if the file has been imported, aborted or cancelled
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.ClearDetails">
            <summary>
            Sets the status of this object as if the file/document doesn't exist.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.GetDetails">
            <summary>
            Loads the document, set the available properties of this object then removes the document from memory.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.GetDetails(System.Xml.XmlDocument)">
            <summary>
            Sets all of the members of this instance using the given document.
            </summary>
            <param name="doc">The XmlDocument to extract information from</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFile.MinimiseResources">
            <summary>
            frees up the momory storage of the document object in an attempt to limit the mempry footprint.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlSrcFile.FileType">
            <summary>
            The name of the filetype for the source file.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlSrcFile.FileVersion">
            <summary>
            The file type version for the source file
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlSrcFile.PartialElement">
            <summary>
            Indicates whether th eimport is for partial elements or complete elements.
            If false then all attributes not provided are defaulted.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlSrcFile.PermittedPseudoAttributes">
            <summary>
            This is the pseudo attributes that are permitted in the data being imported.
            If not specified here they will be reported as a validation failure byt the attribute validation.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlSrcFile.Document">
            <summary>
            provides access to the file as an XmlDocument object.
            Null is returned and an exception logged if the XML cannot be loaded into an XmlDocument object.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlSrcFile.ValidationErrorMessages">
            <summary>
            This may be an empty collection if no validation has been performed.
            This will also be an empty collection if validation was succssful.
            </summary>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlSrcFile.Transform">
            <summary>
            Provides access to the Xml Transform object responsible for this source file.
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.XmlSrcFileFactory">
            <summary>
            Summary description for XMLSrcFileFactory.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.XmlSrcFileFactory.m_instance">
            <summary>
            The singleton instance for this class.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFileFactory.#ctor">
            <summary>
            This private constructor registers the instance with the FactoryManager.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFileFactory.CreateSrcFile(System.String)">
            <summary>
            Creates a SrcFile given a filename
            </summary>
            <param name="filename">the filename of the file to create it from</param>
            <returns>A SrcFile instance if successful, or null if not a supported file.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XmlSrcFileFactory.CreateSrcFileWithMinimalResources(System.String)">
            <summary>
            Creates a SrcFile given a filename
            </summary>
            <param name="filename">the filename of the file to create it from</param>
            <returns>A SrcFile instance if successful, or null if not a supported file.</returns>
        </member>
        <member name="P:Aveva.Pdms.Database.Xml.XmlSrcFileFactory.Instance">
            <summary>
            Provides access to the single instance of this class.
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.XslExportControl">
            <summary>
            Summary description for XslExportControl.
            </summary>
        </member>
        <member name="F:Aveva.Pdms.Database.Xml.XslExportControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExportControl.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExportControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExportControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Aveva.Pdms.Database.Xml.XslExtension">
            <summary>
            Extension object for XSL conversions when using the DbDocumentNavigator
            The default namespace for the extnesion object is defined in XMLNamespaces.
            </summary>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.FULLNAME(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            The database FULLNAME attribute of the element pointed to by elementOrAttribute
            this can be used to access names of elements if ReferencesAsNames is set to false
            </summary>
            <param name="elementOrAttribute">The element or a reference attribute to an element to get the FULLNAME from</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.NAME(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            The database NAME attribute of the element pointed to by elementOrAttribute
            this can be used to access names of elements if ReferencesAsNames is set to false
            </summary>
            <param name="elementOrAttribute">The element or a reference attribute to an element to get the NAME from</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.REF(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            The database REF attribute of the element pointed to by elementOrAttribute
            this can be used to access REFs of elements if ReferencesAsNames is set to true
            </summary>
            <param name="elementOrAttribute">The element or a reference attribute to an element to get the REF from</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.DBREF(System.Xml.XPath.XPathNodeIterator)">
            <summary>
             The database reference (not the REF attribute) of the current element.
             This identifies the database the navigator is currently in if pointing to an element,
             otherwise string.Empty is returned.
             This method ensures the value is returned as a reference and not as name.
            </summary>
            <param name="element">The element to get the DBREF from</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.DBNAME(System.Xml.XPath.XPathNodeIterator)">
            <summary>
             The name of the database the navigator is currently point to, if pointing at an element.
             otherwise string.Empty is returned.
            </summary>
            <param name="element">The element to get the DBNA attribute value from</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.GetAttribute(System.Xml.XPath.XPathNodeIterator,System.String)">
            <summary>
             Gets the value of an attribute from a given element.
             This can be used to access pseudo attribute even if ShowPseudoAttributes has not been specified on the navigator.
             This removes the overhead of navigating pseudos on database navigation if only occasional access to pseudo
             attributes is required.
            </summary>
            <param name="element">The element to get the attribute from</param>
            <param name="attributeName">The name of the attribute to get</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.GetAttributeWithStringQualifier(System.Xml.XPath.XPathNodeIterator,System.String,System.String)">
            <summary>
             Gets the value of an attribute from a given element.
             This can be used to access pseudo attribute even if ShowPseudoAttributes has not been specified on the navigator.
             This removes the overhead of navigating pseudos on database navigation if only occasional access to pseudo
             attributes is required.
            </summary>
            <param name="element">The element to get the attribute from</param>
            <param name="attributeName">The name of the attribute to get</param>
            <param name="qualifier">The string qualifier to use to get the attribute</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.GetAttributeWithIntQualifier(System.Xml.XPath.XPathNodeIterator,System.String,System.Int32)">
            <summary>
             Gets the value of an attribute from a given element.
             This can be used to access pseudo attribute even if ShowPseudoAttributes has not been specified on the navigator.
             This removes the overhead of navigating pseudos on database navigation if only occasional access to pseudo
             attributes is required.
            </summary>
            <param name="element">The element to get the attribute from</param>
            <param name="attributeName">The name of the attribute to get</param>
            <param name="qualifier">The int qualifier to use to get the attribute</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.GetAttributeWithDbElementTypeQualifier(System.Xml.XPath.XPathNodeIterator,System.String,System.String)">
            <summary>
             Gets the value of an attribute from a given element.
             This can be used to access pseudo attribute even if ShowPseudoAttributes has not been specified on the navigator.
             This removes the overhead of navigating pseudos on database navigation if only occasional access to pseudo
             attributes is required.
            </summary>
            <param name="element">The element to get the attribute from</param>
            <param name="attributeName">The name of the attribute to get</param>
            <param name="qualifier">The dbElementType qualifier to use to get the attribute</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.GetAttributeWithDbAttributeQualifier(System.Xml.XPath.XPathNodeIterator,System.String,System.String)">
            <summary>
             Gets the value of an attribute from a given element.
             This can be used to access pseudo attribute even if ShowPseudoAttributes has not been specified on the navigator.
             This removes the overhead of navigating pseudos on database navigation if only occasional access to pseudo
             attributes is required.
            </summary>
            <param name="element">The element to get the attribute from</param>
            <param name="attributeName">The name of the attribute to get</param>
            <param name="qualifier">The attribute qualifier to use to get the attribute</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.GetDbAttribute(System.Xml.XPath.XPathNodeIterator,Aveva.Pdms.Database.DbAttribute)">
            <summary>
             Gets the value of an attribute from a given element.
             This can be used to access pseudo attribute even if ShowPseudoAttributes has not been specified on the navigator.
             This removes the overhead of navigating pseudos on database navigation if only occasional access to pseudo
             attributes is required.
            </summary>
            <param name="element">The element to get the attribute from</param>
            <param name="attribute">The attribute to get the value of</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.AttributeType(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            The type of the attribute pointed to by the provided navigator or string.Empty if the
            navigator doesn't point to an attribute.
            </summary>
            <param name="attribute">The attribute to get the type for</param>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.AttributeIsArray(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            indicates whether the attribute pointed to by an iterator is an array type or not.
            </summary>
            <param name="attribute">The attribute to query</param>
            <returns>true if the navigator points to an attribute that is an array type.</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.AttributeDescription(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Returns the description text for the attribute pointed to by the given iterator
            </summary>
            <param name="attribute">The attribute to get the description of</param>
            <returns>The attribute description</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.AttributeQueryText(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Returns the description text for the attribute pointed to by the given iterator
            </summary>
            <param name="attribute">The attribute to get the description of</param>
            <returns>The attribute description</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.AttributeAtDefault(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Returns true if the attribute the given navigator points to is set to its default value.
            </summary>
            <param name="attribute">The attribute to check the value of</param>
            <returns>true if the attribute is at its default value, otherwise false</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.MemberTypes(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            returns a string containing the list of element types allowed as direct members of the given element
            </summary>
            <param name="element">The element to ge the permitted member types for</param>
            <returns>A space separated string of the permitted member types</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.DescendantTypes(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            returns a string containing the list of element types allowed as descendants of the given element
            </summary>		
            <param name="element">The element to ge the permitted descendant types for</param>
            <returns>A space separated string of the permitted descendant types</returns>
        </member>
        <member name="M:Aveva.Pdms.Database.Xml.XslExtension.PermittedDescendantType(System.Xml.XPath.XPathNodeIterator,System.String)">
            <summary>
            IDentifies if a given element type is a permitted descendant of a given element
            </summary>
            <param name="element">The element to check descendant types for</param>
            <param name="elementType">The element type to check</param>
            <returns>true if elementType is a permitted decendant type for element</returns>
        </member>
    </members>
</doc>
